(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "hatch" defined at hatch_system.ads:3, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Hatch_system__hatch__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __split_fields =
  { rec__hatch_system__hatch__closed [@model_trace:.2825] [@name:Closed] : bool; rec__hatch_system__hatch__locked [@model_trace:.2835] [@name:Locked] : bool }
 
 function __split_fields_rec__hatch_system__hatch__closed__projection [@model_trace:.2825] [@name:Closed] 
   (a : __split_fields) : bool =
  a.rec__hatch_system__hatch__closed
 
 meta "model_projection" function __split_fields_rec__hatch_system__hatch__closed__projection
 
 meta "inline:no" function __split_fields_rec__hatch_system__hatch__closed__projection
 
 function __split_fields_rec__hatch_system__hatch__locked__projection [@model_trace:.2835] [@name:Locked] 
   (a : __split_fields) : bool =
  a.rec__hatch_system__hatch__locked
 
 meta "model_projection" function __split_fields_rec__hatch_system__hatch__locked__projection
 
 meta "inline:no" function __split_fields_rec__hatch_system__hatch__locked__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate hatch_system__hatch__closed__pred 
   (a : __rep) =
  true
 val hatch_system__hatch__closed__pred 
   (a : __rep) : bool
  ensures { result <-> hatch_system__hatch__closed__pred (a : __rep) }
 
 val rec__hatch_system__hatch__closed_ 
   (a : __rep) : bool
  requires {  (hatch_system__hatch__closed__pred a) }
  ensures {  (result = a.__split_fields.rec__hatch_system__hatch__closed) }
 
 predicate hatch_system__hatch__locked__pred 
   (a : __rep) =
  true
 val hatch_system__hatch__locked__pred 
   (a : __rep) : bool
  ensures { result <-> hatch_system__hatch__locked__pred (a : __rep) }
 
 val rec__hatch_system__hatch__locked_ 
   (a : __rep) : bool
  requires {  (hatch_system__hatch__locked__pred a) }
  ensures {  (result = a.__split_fields.rec__hatch_system__hatch__locked) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__hatch_system__hatch__closed = b.__split_fields.rec__hatch_system__hatch__closed) /\ (a.__split_fields.rec__hatch_system__hatch__locked = b.__split_fields.rec__hatch_system__hatch__locked) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "hatch" defined at hatch_system.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__hatch
 use export Hatch_system__hatch__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type hatch =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant hatch_system__hatch__closed__first__bit 
   : int

 
 val constant hatch_system__hatch__closed__last__bit 
   : int

 
 val constant hatch_system__hatch__closed__position 
   : int

 
 axiom hatch_system__hatch__closed__first__bit_axiom :
  ((hatch_system__hatch__closed__first__bit ) >= (0 : int))
 
 axiom hatch_system__hatch__closed__last__bit_axiom :
  ((hatch_system__hatch__closed__last__bit ) > (hatch_system__hatch__closed__first__bit ))
 
 axiom hatch_system__hatch__closed__position_axiom :
  ((hatch_system__hatch__closed__position ) >= (0 : int))
 
 val constant hatch_system__hatch__locked__first__bit 
   : int

 
 val constant hatch_system__hatch__locked__last__bit 
   : int

 
 val constant hatch_system__hatch__locked__position 
   : int

 
 axiom hatch_system__hatch__locked__first__bit_axiom :
  ((hatch_system__hatch__locked__first__bit ) >= (0 : int))
 
 axiom hatch_system__hatch__locked__last__bit_axiom :
  ((hatch_system__hatch__locked__last__bit ) > (hatch_system__hatch__locked__first__bit ))
 
 axiom hatch_system__hatch__locked__position_axiom :
  ((hatch_system__hatch__locked__position ) >= (0 : int))
 
 val function user_eq 
   (a : hatch) (b : hatch) : bool
 
 val constant dummy 
   : hatch

 
 type hatch__ref =
  { mutable hatch__content : hatch }
 
 function hatch__ref_hatch__content__projection 
   (a : hatch__ref) : hatch =
  a.hatch__content
 
 meta "model_projection" function hatch__ref_hatch__content__projection
 
 meta "inline:no" function hatch__ref_hatch__content__projection
 
 val hatch__havoc 
   (x : hatch__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Thatch_indexB" defined at hatch_system.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__Thatch_indexB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type thatch_indexB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = thatch_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type thatch_indexB__ref =
  { mutable thatch_indexB__content : thatch_indexB }
 
 function thatch_indexB__ref_thatch_indexB__content__projection 
   (a : thatch_indexB__ref) : thatch_indexB =
  a.thatch_indexB__content
 
 meta "model_projection" function thatch_indexB__ref_thatch_indexB__content__projection
 
 meta "inline:no" function thatch_indexB__ref_thatch_indexB__content__projection
 
 val thatch_indexB__havoc 
   (x : thatch_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Thatch_indexB" defined at hatch_system.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__Thatch_indexB__rep
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Hatch_system__Thatch_indexB.thatch_indexB) : int =
  (Hatch_system__Thatch_indexB.thatch_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__Thatch_indexB.thatch_indexB, 
 predicate in_range = Hatch_system__Thatch_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "hatch_index" defined at hatch_system.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__hatch_index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type hatch_index =
  < range 0 1 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = hatch_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type hatch_index__ref =
  { mutable hatch_index__content : hatch_index }
 
 function hatch_index__ref_hatch_index__content__projection 
   (a : hatch_index__ref) : hatch_index =
  a.hatch_index__content
 
 meta "model_projection" function hatch_index__ref_hatch_index__content__projection
 
 meta "inline:no" function hatch_index__ref_hatch_index__content__projection
 
 val hatch_index__havoc 
   (x : hatch_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "hatch_index" defined at hatch_system.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__hatch_index__rep
 use        Hatch_system__hatch_index as Hatch_system__hatch_index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Hatch_system__hatch_index.hatch_index) : int =
  (Hatch_system__hatch_index.hatch_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__hatch_index.hatch_index, 
 predicate in_range = Hatch_system__hatch_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "ThatchesB" defined at hatch_system.ads:9, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Hatch_system__hatch
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Hatch_system__hatch.hatch
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    (Hatch_system__hatch.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     (Hatch_system__hatch.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "ThatchesB" defined at hatch_system.ads:9, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Hatch_system__hatch__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Hatch_system__hatch.component_type, 
 type map = Array__Int__Hatch_system__hatch.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Hatch_system__hatch.get

end

(* Module for axiomatizing type "ThatchesB" defined at hatch_system.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__ThatchesB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep
 use        Hatch_system__hatch_index as Hatch_system__hatch_index
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 type component_type =
  Hatch_system__hatch.hatch
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Hatch_system__hatch.map, 
 function array_bool_eq = Array__Int__Hatch_system__hatch.bool_eq, 
 type index_base_type = Hatch_system__Thatch_indexB.thatch_indexB, 
 type index_rep_type = int, 
 function to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Hatch_system__Thatch_indexB.in_range, 
 predicate index_dynamic_property = Hatch_system__hatch_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type thatchesB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type thatchesB__ref =
  { mutable thatchesB__content : thatchesB }
 
 function thatchesB__ref_thatchesB__content__projection 
   (a : thatchesB__ref) : thatchesB =
  a.thatchesB__content
 
 meta "model_projection" function thatchesB__ref_thatchesB__content__projection
 
 meta "inline:no" function thatchesB__ref_thatchesB__content__projection
 
 val thatchesB__havoc 
   (x : thatchesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "hatches" defined at hatch_system.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__hatches
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 type component_type =
  Hatch_system__hatch.hatch
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Hatch_system__hatch.map, 
 function array_bool_eq = Array__Int__Hatch_system__hatch.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "status" defined at hatch_system.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type status__ref =
  { mutable status__content : status }
 
 function status__ref_status__content__projection 
   (a : status__ref) : status =
  a.status__content
 
 meta "model_projection" function status__ref_status__content__projection
 
 meta "inline:no" function status__ref_status__content__projection
 
 val status__havoc 
   (x : status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "status" defined at hatch_system.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__status__rep
 use        Hatch_system__status as Hatch_system__status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__status.status, 
 predicate in_range = Hatch_system__status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "hatch_system" defined at hatch_system.ads:58, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Hatch_system__hatch_system__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Hatch_system__hatches as Hatch_system__hatches
 use        Hatch_system__status as Hatch_system__status
 use        Hatch_system__status__rep as Hatch_system__status__rep
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 type __split_fields =
  { rec__hatch_system__hatch_system__h [@name:H] [@model_trace:.3353] : Array__Int__Hatch_system__hatch.map; rec__hatch_system__hatch_system__s [@model_trace:.3363] [@name:S] : Hatch_system__status.status; rec__ext__ : Main.__private }
 
 function __split_fields_rec__hatch_system__hatch_system__h__projection [@name:H] [@model_trace:.3353] 
   (a : __split_fields) : Array__Int__Hatch_system__hatch.map =
  a.rec__hatch_system__hatch_system__h
 
 meta "model_projection" function __split_fields_rec__hatch_system__hatch_system__h__projection
 
 meta "inline:no" function __split_fields_rec__hatch_system__hatch_system__h__projection
 
 function __split_fields_rec__hatch_system__hatch_system__s__projection [@model_trace:.3363] [@name:S] 
   (a : __split_fields) : Hatch_system__status.status =
  a.rec__hatch_system__hatch_system__s
 
 meta "model_projection" function __split_fields_rec__hatch_system__hatch_system__s__projection
 
 meta "inline:no" function __split_fields_rec__hatch_system__hatch_system__s__projection
 
 function __split_fields_rec__ext____projection 
   (a : __split_fields) : Main.__private =
  a.rec__ext__
 
 meta "model_projection" function __split_fields_rec__ext____projection
 
 meta "inline:no" function __split_fields_rec__ext____projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields; attr__tag : int }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function __rep_attr__tag__projection 
   (a : __rep) : int =
  a.attr__tag
 
 meta "model_projection" function __rep_attr__tag__projection
 
 meta "inline:no" function __rep_attr__tag__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate hatch_system__hatch_system__h__pred 
   (a : __rep) =
  true
 val hatch_system__hatch_system__h__pred 
   (a : __rep) : bool
  ensures { result <-> hatch_system__hatch_system__h__pred (a : __rep) }
 
 val rec__hatch_system__hatch_system__h_ 
   (a : __rep) : Array__Int__Hatch_system__hatch.map
  requires {  (hatch_system__hatch_system__h__pred a) }
  ensures {  (result = a.__split_fields.rec__hatch_system__hatch_system__h) }
 
 predicate hatch_system__hatch_system__s__pred 
   (a : __rep) =
  true
 val hatch_system__hatch_system__s__pred 
   (a : __rep) : bool
  ensures { result <-> hatch_system__hatch_system__s__pred (a : __rep) }
 
 val rec__hatch_system__hatch_system__s_ 
   (a : __rep) : Hatch_system__status.status
  requires {  (hatch_system__hatch_system__s__pred a) }
  ensures {  (result = a.__split_fields.rec__hatch_system__hatch_system__s) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (Hatch_system__hatches.bool_eq a.__split_fields.rec__hatch_system__hatch_system__h b.__split_fields.rec__hatch_system__hatch_system__h) /\ ((Hatch_system__status__rep.to_rep a.__split_fields.rec__hatch_system__hatch_system__s) = (Hatch_system__status__rep.to_rep b.__split_fields.rec__hatch_system__hatch_system__s)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }
 
 val function __dispatch_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "hatch_system" defined at hatch_system.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__hatch_system
 use export Hatch_system__hatch_system__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type hatch_system =
  __rep
 
 val constant __tag 
   : int

 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant hatch_system__hatch_system__h__first__bit 
   : int

 
 val constant hatch_system__hatch_system__h__last__bit 
   : int

 
 val constant hatch_system__hatch_system__h__position 
   : int

 
 axiom hatch_system__hatch_system__h__first__bit_axiom :
  ((hatch_system__hatch_system__h__first__bit ) >= (0 : int))
 
 axiom hatch_system__hatch_system__h__last__bit_axiom :
  ((hatch_system__hatch_system__h__last__bit ) > (hatch_system__hatch_system__h__first__bit ))
 
 axiom hatch_system__hatch_system__h__position_axiom :
  ((hatch_system__hatch_system__h__position ) >= (0 : int))
 
 val constant hatch_system__hatch_system__s__first__bit 
   : int

 
 val constant hatch_system__hatch_system__s__last__bit 
   : int

 
 val constant hatch_system__hatch_system__s__position 
   : int

 
 axiom hatch_system__hatch_system__s__first__bit_axiom :
  ((hatch_system__hatch_system__s__first__bit ) >= (0 : int))
 
 axiom hatch_system__hatch_system__s__last__bit_axiom :
  ((hatch_system__hatch_system__s__last__bit ) > (hatch_system__hatch_system__s__first__bit ))
 
 axiom hatch_system__hatch_system__s__position_axiom :
  ((hatch_system__hatch_system__s__position ) >= (0 : int))
 
 val function user_eq 
   (a : hatch_system) (b : hatch_system) : bool
 
 val constant dummy 
   : hatch_system

 
 type hatch_system__ref =
  { mutable hatch_system__content : hatch_system }
 
 function hatch_system__ref_hatch_system__content__projection 
   (a : hatch_system__ref) : hatch_system =
  a.hatch_system__content
 
 meta "model_projection" function hatch_system__ref_hatch_system__content__projection
 
 meta "inline:no" function hatch_system__ref_hatch_system__content__projection
 
 val hatch_system__havoc 
   (x : hatch_system__ref) : unit
  writes {x}

end

(* Module for defining the constant "self" defined at hatch_system.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__get_hatches__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val constant self [#"hatch_system.ads" 15 0 0][@name:Self] [@model_projected] [@model_trace:2909] 
   : Hatch_system__hatch_system.hatch_system

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__get_hatches__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_hatches" defined at hatch_system.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__get_hatches
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val function get_hatches 
   (self : Hatch_system__hatch_system.hatch_system) : Array__Int__Hatch_system__hatch.map
 
 val predicate get_hatches__function_guard 
   (temp___result_155 : Array__Int__Hatch_system__hatch.map) (self : Hatch_system__hatch_system.hatch_system)
 
 scope Dispatch
  val function get_hatches 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : Array__Int__Hatch_system__hatch.map
  
  val predicate get_hatches__function_guard 
    (temp___result_155 : Array__Int__Hatch_system__hatch.map) (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system)

 end

end

(* Module for defining the constant "self" defined at hatch_system.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__get_status__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val constant self [#"hatch_system.ads" 17 0 0][@name:Self] [@model_projected] [@model_trace:2928] 
   : Hatch_system__hatch_system.hatch_system

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__get_status__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_status" defined at hatch_system.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__get_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val function get_status 
   (self : Hatch_system__hatch_system.hatch_system) : int
 
 val predicate get_status__function_guard 
   (temp___result_156 : int) (self : Hatch_system__hatch_system.hatch_system)
 
 scope Dispatch
  val function get_status 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : int
  
  val predicate get_status__function_guard 
    (temp___result_156 : int) (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system)

 end

end

(* Module for defining the constant "self" defined at hatch_system.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__at_least_one_hatch_is_closed__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val constant self [#"hatch_system.ads" 19 0 0][@name:Self] [@model_projected] [@model_trace:2947] 
   : Hatch_system__hatch_system.hatch_system

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__at_least_one_hatch_is_closed__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T19s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__at_least_one_hatch_is_closed__L18s__T19s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t19s =
  < range 0 1 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t19s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t19s__ref =
  { mutable t19s__content : t19s }
 
 function t19s__ref_t19s__content__projection 
   (a : t19s__ref) : t19s =
  a.t19s__content
 
 meta "model_projection" function t19s__ref_t19s__content__projection
 
 meta "inline:no" function t19s__ref_t19s__content__projection
 
 val t19s__havoc 
   (x : t19s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T19s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__at_least_one_hatch_is_closed__L18s__T19s__rep
 use        Hatch_system__at_least_one_hatch_is_closed__L18s__T19s as Hatch_system__at_least_one_hatch_is_closed__L18s__T19s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Hatch_system__at_least_one_hatch_is_closed__L18s__T19s.t19s) : int =
  (Hatch_system__at_least_one_hatch_is_closed__L18s__T19s.t19s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__at_least_one_hatch_is_closed__L18s__T19s.t19s, 
 predicate in_range = Hatch_system__at_least_one_hatch_is_closed__L18s__T19s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__at_least_one_hatch_is_closed__L3s__T4s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t4s =
  < range 0 1 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t4s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t4s__ref =
  { mutable t4s__content : t4s }
 
 function t4s__ref_t4s__content__projection 
   (a : t4s__ref) : t4s =
  a.t4s__content
 
 meta "model_projection" function t4s__ref_t4s__content__projection
 
 meta "inline:no" function t4s__ref_t4s__content__projection
 
 val t4s__havoc 
   (x : t4s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T4s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__at_least_one_hatch_is_closed__L3s__T4s__rep
 use        Hatch_system__at_least_one_hatch_is_closed__L3s__T4s as Hatch_system__at_least_one_hatch_is_closed__L3s__T4s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Hatch_system__at_least_one_hatch_is_closed__L3s__T4s.t4s) : int =
  (Hatch_system__at_least_one_hatch_is_closed__L3s__T4s.t4s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__at_least_one_hatch_is_closed__L3s__T4s.t4s, 
 predicate in_range = Hatch_system__at_least_one_hatch_is_closed__L3s__T4s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for possibly declaring a logic function for "at_least_one_hatch_is_closed" defined at hatch_system.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__at_least_one_hatch_is_closed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val function at_least_one_hatch_is_closed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
 
 val predicate at_least_one_hatch_is_closed__function_guard 
   (temp___result_157 : bool) (self : Hatch_system__hatch_system.hatch_system)
 
 scope Dispatch
  val function at_least_one_hatch_is_closed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
  
  val predicate at_least_one_hatch_is_closed__function_guard 
    (temp___result_157 : bool) (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system)

 end

end

(* Module for defining the constant "self" defined at hatch_system.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__is_sealed__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val constant self [#"hatch_system.ads" 24 0 0][@name:Self] [@model_trace:2988] [@model_projected] 
   : Hatch_system__hatch_system.hatch_system

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__is_sealed__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_sealed" defined at hatch_system.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__is_sealed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val function is_sealed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
 
 val predicate is_sealed__function_guard 
   (temp___result_158 : bool) (self : Hatch_system__hatch_system.hatch_system)
 
 scope Dispatch
  val function is_sealed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
  
  val predicate is_sealed__function_guard 
    (temp___result_158 : bool) (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system)

 end

end

(* Module for defining the constant "self" defined at hatch_system.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__more_than_one_hatches_are_closed__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val constant self [#"hatch_system.ads" 27 0 0][@name:Self] [@model_projected] [@model_trace:3012] 
   : Hatch_system__hatch_system.hatch_system

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__more_than_one_hatches_are_closed__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "more_than_one_hatches_are_closed" defined at hatch_system.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__more_than_one_hatches_are_closed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val function more_than_one_hatches_are_closed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
 
 val predicate more_than_one_hatches_are_closed__function_guard 
   (temp___result_159 : bool) (self : Hatch_system__hatch_system.hatch_system)
 
 scope Dispatch
  val function more_than_one_hatches_are_closed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
  
  val predicate more_than_one_hatches_are_closed__function_guard 
    (temp___result_159 : bool) (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system)

 end

end

(* Module for possibly declaring a logic function for "create" defined at hatch_system.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__create
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val function create 
   (__void_param : unit) : Hatch_system__hatch_system.hatch_system
 
 val predicate create__function_guard 
   (temp___result_160 : Hatch_system__hatch_system.hatch_system) (__void_param : unit)
 
 scope Dispatch
  val function create 
    (attr__tag : int) (__void_param : unit) : Hatch_system__hatch_system.hatch_system
  
  val predicate create__function_guard 
    (temp___result_160 : Hatch_system__hatch_system.hatch_system) (attr__tag : int) (__void_param : unit)

 end

end

(* Module for defining the constant "index" defined at hatch_system.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__open_hatch__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"hatch_system.ads" 31 0 0][@model_trace:3050] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at hatch_system.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__open_hatch__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "Thatch_systemC" defined at hatch_system.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__Thatch_systemC
 use export Hatch_system__hatch_system
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at hatch_system.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__close_hatch__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"hatch_system.ads" 36 0 0][@model_trace:3101] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at hatch_system.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__close_hatch__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at hatch_system.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__lock_hatch__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"hatch_system.ads" 39 0 0][@model_trace:3141] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at hatch_system.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__lock_hatch__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at hatch_system.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Hatch_system__unlock_hatch__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"hatch_system.ads" 43 0 0][@name:Index] [@model_trace:3203] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at hatch_system.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__unlock_hatch__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T14s" defined at hatch_system.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__seal__L13s__T14s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep

 type t14s =
  Hatch_system__Thatch_indexB.thatch_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t14s, 
 type rep_type = int, 
 function base_to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function base_of_rep = Hatch_system__Thatch_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14s__ref =
  { mutable t14s__content : t14s }
 
 function t14s__ref_t14s__content__projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref_t14s__content__projection
 
 meta "inline:no" function t14s__ref_t14s__content__projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16s" defined at hatch_system.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__unseal__L15s__T16s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep

 type t16s =
  Hatch_system__Thatch_indexB.thatch_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function base_of_rep = Hatch_system__Thatch_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content : t16s }
 
 function t16s__ref_t16s__content__projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref_t16s__content__projection
 
 meta "inline:no" function t16s__ref_t16s__content__projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at hatch_system.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__create__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t1b =
  < range 0 1 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content : t1b }
 
 function t1b__ref_t1b__content__projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref_t1b__content__projection
 
 meta "inline:no" function t1b__ref_t1b__content__projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at hatch_system.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__create__T1b__rep
 use        Hatch_system__create__T1b as Hatch_system__create__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Hatch_system__create__T1b.t1b) : int =
  (Hatch_system__create__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Hatch_system__create__T1b.t1b, 
 predicate in_range = Hatch_system__create__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at hatch_system.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__create__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 type component_type =
  Hatch_system__hatch.hatch
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Hatch_system__hatch.map, 
 function array_bool_eq = Array__Int__Hatch_system__hatch.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at hatch_system.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__more_than_one_hatches_are_closed__L_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep

 type t4b =
  Hatch_system__Thatch_indexB.thatch_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function base_of_rep = Hatch_system__Thatch_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content : t4b }
 
 function t4b__ref_t4b__content__projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref_t4b__content__projection
 
 meta "inline:no" function t4b__ref_t4b__content__projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at hatch_system.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__seal__L_2__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep

 type t11b =
  Hatch_system__Thatch_indexB.thatch_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function base_of_rep = Hatch_system__Thatch_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content : t11b }
 
 function t11b__ref_t11b__content__projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref_t11b__content__projection
 
 meta "inline:no" function t11b__ref_t11b__content__projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at hatch_system.adb:88, created in Gnat2Why.Types.Translate_Type *)
module Hatch_system__unseal__L_3__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__Thatch_indexB as Hatch_system__Thatch_indexB
 use        Hatch_system__Thatch_indexB__rep as Hatch_system__Thatch_indexB__rep

 type t12b =
  Hatch_system__Thatch_indexB.thatch_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Hatch_system__Thatch_indexB__rep.to_rep, 
 function base_of_rep = Hatch_system__Thatch_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content : t12b }
 
 function t12b__ref_t12b__content__projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref_t12b__content__projection
 
 meta "inline:no" function t12b__ref_t12b__content__projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__open_hatch__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 31 0 0][@name:Self] [@model_projected] [@model_trace:3041]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 31 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__open_hatch__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__close_hatch__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 36 0 0][@name:Self] [@model_trace:3092] [@model_projected]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 36 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__close_hatch__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:39, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__lock_hatch__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 39 0 0][@name:Self] [@model_trace:3132] [@model_projected]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 39 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__lock_hatch__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:43, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__unlock_hatch__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 43 0 0][@name:Self] [@model_projected] [@model_trace:3194]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 43 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__unlock_hatch__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:47, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__seal__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 47 0 0][@name:Self] [@model_projected] [@model_trace:3242]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 47 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__seal__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.ads:52, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__unseal__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.ads" 52 0 0][@model_trace:3300] [@name:Self] [@model_projected]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.ads" 52 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__unseal__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "self" defined at hatch_system.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__create__self
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 val self__split_fields [#"hatch_system.adb" 5 0 0][@name:Self] [@model_projected] [@model_trace:2317]  : Hatch_system__hatch_system.__split_fields__ref 
 
 val constant self__attr__tag [#"hatch_system.adb" 5 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "self" defined at hatch_system.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__create__self___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at hatch_system.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__more_than_one_hatches_are_closed__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"hatch_system.adb" 15 0 0][@model_trace:2369] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at hatch_system.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__more_than_one_hatches_are_closed__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at hatch_system.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__more_than_one_hatches_are_closed__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"hatch_system.adb" 17 0 0][@model_projected] [@model_trace:2382] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at hatch_system.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__more_than_one_hatches_are_closed__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at hatch_system.adb:78, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__seal__L_2__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"hatch_system.adb" 78 0 0][@model_projected] [@name:I] [@model_trace:2680]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at hatch_system.adb:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__seal__L_2__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at hatch_system.adb:88, created in Gnat2Why.Decls.Translate_Variable *)
module Hatch_system__unseal__L_3__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"hatch_system.adb" 88 0 0][@model_trace:2740] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at hatch_system.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__unseal__L_3__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "open_hatch" defined at hatch_system.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__open_hatch
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "close_hatch" defined at hatch_system.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__close_hatch
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "lock_hatch" defined at hatch_system.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__lock_hatch
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unlock_hatch" defined at hatch_system.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__unlock_hatch
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "seal" defined at hatch_system.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__seal
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unseal" defined at hatch_system.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Hatch_system__unseal
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at hatch_system.adb:17, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Hatch_system__more_than_one_hatches_are_closed__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at hatch_system.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__more_than_one_hatches_are_closed__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at hatch_system.adb:78, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Hatch_system__seal__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at hatch_system.adb:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__seal__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at hatch_system.adb:88, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Hatch_system__unseal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at hatch_system.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Hatch_system__unseal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "hatch" defined at hatch_system.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__hatch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : Hatch_system__hatch.hatch) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_165 : Hatch_system__hatch.hatch) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : Hatch_system__hatch.hatch) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : Hatch_system__hatch.hatch) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : Hatch_system__hatch.hatch) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : Hatch_system__hatch.hatch) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "Thatch_indexB" defined at hatch_system.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__Thatch_indexB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "hatch_index" defined at hatch_system.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__hatch_index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch_index as Hatch_system__hatch_index

 predicate dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) =
  (if (( temp___is_init_170 \/ (Hatch_system__hatch_index.first <= Hatch_system__hatch_index.last) )) then (
   (Hatch_system__hatch_index.dynamic_property Hatch_system__hatch_index.first Hatch_system__hatch_index.last temp___expr_174)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_175 : int) (temp___skip_top_level_176 : bool) }

end

(* Module giving axioms for type "ThatchesB" defined at hatch_system.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__ThatchesB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "hatches" defined at hatch_system.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__hatches___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : Array__Int__Hatch_system__hatch.map) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_181 : Array__Int__Hatch_system__hatch.map) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : Array__Int__Hatch_system__hatch.map) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_183 : Array__Int__Hatch_system__hatch.map) (temp___skip_top_level_184 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_183 : Array__Int__Hatch_system__hatch.map) (temp___skip_top_level_184 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_183 : Array__Int__Hatch_system__hatch.map) (temp___skip_top_level_184 : bool) }

end

(* Module giving axioms for type "status" defined at hatch_system.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__status as Hatch_system__status

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (( temp___is_init_189 \/ (Hatch_system__status.first <= Hatch_system__status.last) )) then (
   (Hatch_system__status.dynamic_property Hatch_system__status.first Hatch_system__status.last temp___expr_193)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : int) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "hatch_system" defined at hatch_system.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__hatch_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 predicate dynamic_invariant [@inline] 
   (temp___expr_200 : Hatch_system__hatch_system.hatch_system) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_200 : Hatch_system__hatch_system.hatch_system) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_200 : Hatch_system__hatch_system.hatch_system) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_202 : Hatch_system__hatch_system.hatch_system) (temp___skip_top_level_203 : bool) =
  ((Hatch_system__hatch_system.attr__tag temp___expr_202) = Hatch_system__hatch_system.__tag)
 val default_initial_assumption [@inline] 
   (temp___expr_202 : Hatch_system__hatch_system.hatch_system) (temp___skip_top_level_203 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_202 : Hatch_system__hatch_system.hatch_system) (temp___skip_top_level_203 : bool) }

end

(* Module giving axioms for type "T19s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__at_least_one_hatch_is_closed__L18s__T19s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4s" defined at hatch_system.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__at_least_one_hatch_is_closed__L3s__T4s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Thatch_systemC" defined at hatch_system.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__Thatch_systemC___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system

 predicate dynamic_invariant [@inline] 
   (temp___expr_240 : Hatch_system__hatch_system.hatch_system) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_240 : Hatch_system__hatch_system.hatch_system) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_240 : Hatch_system__hatch_system.hatch_system) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) }

end

(* Module giving axioms for type "T14s" defined at hatch_system.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__seal__L13s__T14s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16s" defined at hatch_system.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__unseal__L15s__T16s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T1b" defined at hatch_system.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__create__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at hatch_system.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__create__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at hatch_system.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__more_than_one_hatches_are_closed__L_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at hatch_system.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__seal__L_2__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at hatch_system.adb:88, created in Gnat2Why.Types.Generate_Type_Completion *)
module Hatch_system__unseal__L_3__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at hatch_system.adb:7, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_324
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val function temp_____aggregate_def_324 
   (temp___326 : Hatch_system__hatch.hatch) : Array__Int__Hatch_system__hatch.map

end
(* Module for declaring a program function (and possibly an axiom) for "get_hatches" defined at hatch_system.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__get_hatches___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val get_hatches 
   (self : Hatch_system__hatch_system.hatch_system) : Array__Int__Hatch_system__hatch.map
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__get_hatches.get_hatches self)) /\ (Hatch_system__get_hatches.get_hatches__function_guard result self) )/\(Hatch_system__hatches___axiom.dynamic_invariant result True False True True) ) }
 
 scope Dispatch
  val get_hatches 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : Array__Int__Hatch_system__hatch.map
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__get_hatches.Dispatch.get_hatches attr__tag self)) /\ (Hatch_system__get_hatches.Dispatch.get_hatches__function_guard result attr__tag self) )/\(Hatch_system__hatches___axiom.dynamic_invariant result True False True True) ) }

 end
 
 axiom get_hatches__post_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_hatches.get_hatches self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__get_hatches.get_hatches self) in (
    (if ((Hatch_system__get_hatches.get_hatches__function_guard result self)) then (
     ( ( true /\ (Hatch_system__hatches___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom get_hatches__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_hatches.Dispatch.get_hatches attr__tag self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__get_hatches.Dispatch.get_hatches attr__tag self) in (
    (if ((Hatch_system__get_hatches.Dispatch.get_hatches__function_guard result attr__tag self)) then (
     ( ( true /\ (Hatch_system__hatches___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_hatches.Dispatch.get_hatches Hatch_system__hatch_system.__tag self)].
   ( (Hatch_system__get_hatches.Dispatch.get_hatches__function_guard (Hatch_system__get_hatches.Dispatch.get_hatches Hatch_system__hatch_system.__tag self) Hatch_system__hatch_system.__tag self) -> ((epsilon temp___result_214 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_214 = (Hatch_system__get_hatches.get_hatches self)) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_214 self) )) = (Hatch_system__get_hatches.Dispatch.get_hatches Hatch_system__hatch_system.__tag self)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_status" defined at hatch_system.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__get_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__get_status as Hatch_system__get_status
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom

 val get_status 
   (self : Hatch_system__hatch_system.hatch_system) : int
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__get_status.get_status self)) /\ (Hatch_system__get_status.get_status__function_guard result self) )/\(Hatch_system__status___axiom.dynamic_invariant result True False True True) ) }
 
 scope Dispatch
  val get_status 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : int
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__get_status.Dispatch.get_status attr__tag self)) /\ (Hatch_system__get_status.Dispatch.get_status__function_guard result attr__tag self) )/\(Hatch_system__status___axiom.dynamic_invariant result True False True True) ) }

 end
 
 axiom get_status__post_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_status.get_status self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__get_status.get_status self) in (
    (if ((Hatch_system__get_status.get_status__function_guard result self)) then (
     ( ( true /\ (Hatch_system__status___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom get_status__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_status.Dispatch.get_status attr__tag self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__get_status.Dispatch.get_status attr__tag self) in (
    (if ((Hatch_system__get_status.Dispatch.get_status__function_guard result attr__tag self)) then (
     ( ( true /\ (Hatch_system__status___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__get_status.Dispatch.get_status Hatch_system__hatch_system.__tag self)].
   ( (Hatch_system__get_status.Dispatch.get_status__function_guard (Hatch_system__get_status.Dispatch.get_status Hatch_system__hatch_system.__tag self) Hatch_system__hatch_system.__tag self) -> ((epsilon temp___result_217 : int.
    ( (temp___result_217 = (Hatch_system__get_status.get_status self)) /\ (Hatch_system__get_status.get_status__function_guard temp___result_217 self) )) = (Hatch_system__get_status.Dispatch.get_status Hatch_system__hatch_system.__tag self)) ))

end

(* Module giving a program function and a defining axiom for the expression function "at_least_one_hatch_is_closed" defined at hatch_system.ads:19, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Hatch_system__at_least_one_hatch_is_closed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__at_least_one_hatch_is_closed as Hatch_system__at_least_one_hatch_is_closed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val at_least_one_hatch_is_closed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self)) /\ (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed__function_guard result self) )/\( (result = True) <-> (exists i  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) /\ ( ((let temp___219 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_218 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_218 = (Hatch_system__get_hatches.get_hatches self)) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_218 self) )) in (
    (Array__Int__Hatch_system__hatch.get temp___219 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) )) ) ) }
 
 scope Dispatch
  val at_least_one_hatch_is_closed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed attr__tag self)) /\ (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed__function_guard result attr__tag self) )/\true ) }

 end
 
 axiom at_least_one_hatch_is_closed__post_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self) in (
    (if ((Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed__function_guard result self)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom at_least_one_hatch_is_closed__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed attr__tag self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed attr__tag self) in (
    (if ((Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed__function_guard result attr__tag self)) then (
     ( ( true /\ true )/\true )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed Hatch_system__hatch_system.__tag self)].
   ( (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed__function_guard (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed Hatch_system__hatch_system.__tag self) Hatch_system__hatch_system.__tag self) -> ((Boolean.to_int (epsilon temp___result_222 : bool.
    ( (temp___result_222 = (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self)) /\ (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed__function_guard temp___result_222 self) ))) = (Boolean.to_int (Hatch_system__at_least_one_hatch_is_closed.Dispatch.at_least_one_hatch_is_closed Hatch_system__hatch_system.__tag self))) ))
 
 axiom at_least_one_hatch_is_closed__def_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self)].
   ( (let result = (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self) in (
    (Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed__function_guard result self)))
    -> ( ((Hatch_system__at_least_one_hatch_is_closed.at_least_one_hatch_is_closed self) = True) <-> (exists i  : int.
    ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) /\ ( ((let temp___224 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_223 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_223 = (Hatch_system__get_hatches.get_hatches self)) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_223 self) )) in (
     (Array__Int__Hatch_system__hatch.get temp___224 i)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) )) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "is_sealed" defined at hatch_system.ads:24, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Hatch_system__is_sealed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__get_status as Hatch_system__get_status
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val is_sealed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__is_sealed.is_sealed self)) /\ (Hatch_system__is_sealed.is_sealed__function_guard result self) )/\( (result = True) <-> ((epsilon temp___result_225 : int.
   ( (temp___result_225 = (Hatch_system__get_status.get_status self)) /\ (Hatch_system__get_status.get_status__function_guard temp___result_225 self) )) = (0 : int)) ) ) }
 
 scope Dispatch
  val is_sealed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__is_sealed.Dispatch.is_sealed attr__tag self)) /\ (Hatch_system__is_sealed.Dispatch.is_sealed__function_guard result attr__tag self) )/\true ) }

 end
 
 axiom is_sealed__post_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__is_sealed.is_sealed self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__is_sealed.is_sealed self) in (
    (if ((Hatch_system__is_sealed.is_sealed__function_guard result self)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom is_sealed__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__is_sealed.Dispatch.is_sealed attr__tag self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__is_sealed.Dispatch.is_sealed attr__tag self) in (
    (if ((Hatch_system__is_sealed.Dispatch.is_sealed__function_guard result attr__tag self)) then (
     ( ( true /\ true )/\true )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__is_sealed.Dispatch.is_sealed Hatch_system__hatch_system.__tag self)].
   ( (Hatch_system__is_sealed.Dispatch.is_sealed__function_guard (Hatch_system__is_sealed.Dispatch.is_sealed Hatch_system__hatch_system.__tag self) Hatch_system__hatch_system.__tag self) -> ((Boolean.to_int (epsilon temp___result_228 : bool.
    ( (temp___result_228 = (Hatch_system__is_sealed.is_sealed self)) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_228 self) ))) = (Boolean.to_int (Hatch_system__is_sealed.Dispatch.is_sealed Hatch_system__hatch_system.__tag self))) ))
 
 axiom is_sealed__def_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__is_sealed.is_sealed self)].
   ( (let result = (Hatch_system__is_sealed.is_sealed self) in (
    (Hatch_system__is_sealed.is_sealed__function_guard result self)))
    -> ( ((Hatch_system__is_sealed.is_sealed self) = True) <-> ((epsilon temp___result_229 : int.
    ( (temp___result_229 = (Hatch_system__get_status.get_status self)) /\ (Hatch_system__get_status.get_status__function_guard temp___result_229 self) )) = (0 : int)) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "more_than_one_hatches_are_closed" defined at hatch_system.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__more_than_one_hatches_are_closed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__more_than_one_hatches_are_closed as Hatch_system__more_than_one_hatches_are_closed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val more_than_one_hatches_are_closed 
   (self : Hatch_system__hatch_system.hatch_system) : bool
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed self)) /\ (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed__function_guard result self) )/\true ) }
 
 scope Dispatch
  val more_than_one_hatches_are_closed 
    (attr__tag : int) (self : Hatch_system__hatch_system.hatch_system) : bool
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed attr__tag self)) /\ (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed__function_guard result attr__tag self) )/\true ) }

 end
 
 axiom more_than_one_hatches_are_closed__post_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed self) in (
    (if ((Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed__function_guard result self)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom more_than_one_hatches_are_closed__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed attr__tag self)].
   ( (Hatch_system__hatch_system___axiom.dynamic_invariant self True True True True) -> (let result = (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed attr__tag self) in (
    (if ((Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed__function_guard result attr__tag self)) then (
     ( ( true /\ true )/\true )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall self   : Hatch_system__hatch_system.hatch_system [(Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed Hatch_system__hatch_system.__tag self)].
   ( (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed__function_guard (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed Hatch_system__hatch_system.__tag self) Hatch_system__hatch_system.__tag self) -> ((Boolean.to_int (epsilon temp___result_232 : bool.
    ( (temp___result_232 = (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed self)) /\ (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed__function_guard temp___result_232 self) ))) = (Boolean.to_int (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed Hatch_system__hatch_system.__tag self))) ))

end

(* Module for declaring a program function (and possibly an axiom) for "create" defined at hatch_system.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__create___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__create as Hatch_system__create
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val create 
   (__void_param : unit) : Hatch_system__hatch_system.hatch_system
  requires {  true }
  ensures {  ( ( (result = (Hatch_system__create.create ())) /\ (Hatch_system__create.create__function_guard result ()) )/\(Hatch_system__hatch_system___axiom.dynamic_invariant result True False True True) ) }
 
 scope Dispatch
  val create 
    (attr__tag : int) (__void_param : unit) : Hatch_system__hatch_system.hatch_system
   requires {  true }
   ensures {  ( ( (result = (Hatch_system__create.Dispatch.create attr__tag ())) /\ (Hatch_system__create.Dispatch.create__function_guard result attr__tag ()) )/\(Hatch_system__hatch_system___axiom.dynamic_invariant result True False True True) ) }

 end
 
 axiom create__post_axiom :
  (forall __void_param   : unit [(Hatch_system__create.create __void_param)].
   ( true -> (let result = (Hatch_system__create.create __void_param) in (
    (if ((Hatch_system__create.create__function_guard result __void_param)) then (
     ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant result True False True True) )/\((Hatch_system__hatch_system.attr__tag result) = Hatch_system__hatch_system.__tag) )) else true)))
    ))
 
 axiom create__post__dispatch_axiom :
  (forall attr__tag   : int.
  (forall __void_param   : unit [(Hatch_system__create.Dispatch.create attr__tag __void_param)].
   ( true -> (let result = (Hatch_system__create.Dispatch.create attr__tag __void_param) in (
    (if ((Hatch_system__create.Dispatch.create__function_guard result attr__tag __void_param)) then (
     ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant result True False True True) )/\((Hatch_system__hatch_system.attr__tag result) = attr__tag) )) else true)))
    )))
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall __void_param   : unit [(Hatch_system__create.Dispatch.create Hatch_system__hatch_system.__tag __void_param)].
   ( (Hatch_system__create.Dispatch.create__function_guard (Hatch_system__create.Dispatch.create Hatch_system__hatch_system.__tag __void_param) Hatch_system__hatch_system.__tag __void_param) -> ((epsilon temp___result_235 : Hatch_system__hatch_system.hatch_system.
    ( (temp___result_235 = (Hatch_system__create.create __void_param)) /\ (Hatch_system__create.create__function_guard temp___result_235 __void_param) )) = (Hatch_system__create.Dispatch.create Hatch_system__hatch_system.__tag __void_param)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "open_hatch" defined at hatch_system.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__open_hatch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__more_than_one_hatches_are_closed as Hatch_system__more_than_one_hatches_are_closed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val open_hatch 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3070] ( ((epsilon temp___result_242 : bool.
   ( (temp___result_242 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_242 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) /\ ( [@GP_Pretty_Ada:3080] ( ((let temp___244 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_243 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_243 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_243 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___244 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) ) /\ ( [@GP_Pretty_Ada:3084] ((epsilon temp___result_245 : bool.
   ( (temp___result_245 = (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed__function_guard temp___result_245 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) ) ) }
  ensures {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate open_hatch__specific_post 
    (attr__tag : int) (hatch_system__open_hatch__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (index : int) (hatch_system__open_hatch__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val open_hatch 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
   requires {  ( ( ( [@GP_Pretty_Ada:5224] ( ((epsilon temp___result_246 : bool.
    ( (temp___result_246 = (Hatch_system__is_sealed.Dispatch.is_sealed (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.Dispatch.is_sealed__function_guard temp___result_246 (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) /\ ( [@GP_Pretty_Ada:5229] ( ((let temp___248 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_247 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_247 = (Hatch_system__get_hatches.Dispatch.get_hatches (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.Dispatch.get_hatches__function_guard temp___result_247 (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___248 index)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) ) /\ ( [@GP_Pretty_Ada:5238] ((epsilon temp___result_249 : bool.
    ( (temp___result_249 = (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__more_than_one_hatches_are_closed.Dispatch.more_than_one_hatches_are_closed__function_guard temp___result_249 (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) ) ) }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(open_hatch__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag index (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__open_hatch__self__fields   hatch_system__open_hatch__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   index   : int [(Dispatch.open_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__open_hatch__self__fields self__attr__tag index hatch_system__open_hatch__self__old__fields)].
   ( (Dispatch.open_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__open_hatch__self__fields self__attr__tag index hatch_system__open_hatch__self__old__fields) -> (let temp___self_252 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__open_hatch__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_252 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__open_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    true))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "close_hatch" defined at hatch_system.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__close_hatch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val close_hatch 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:3595] ( ((let temp___254 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_253 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_253 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_253 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___254 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) ) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate close_hatch__specific_post 
    (attr__tag : int) (hatch_system__close_hatch__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (index : int) (hatch_system__close_hatch__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val close_hatch 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(close_hatch__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag index (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__close_hatch__self__fields   hatch_system__close_hatch__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   index   : int [(Dispatch.close_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__close_hatch__self__fields self__attr__tag index hatch_system__close_hatch__self__old__fields)].
   ( (Dispatch.close_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__close_hatch__self__fields self__attr__tag index hatch_system__close_hatch__self__old__fields) -> (let temp___self_257 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__close_hatch__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_257 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__close_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    ( [@GP_Pretty_Ada:3595] ( ((let temp___259 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_258 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_258 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__close_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_258 { Hatch_system__hatch_system.__split_fields = hatch_system__close_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
     (Array__Int__Hatch_system__hatch.get temp___259 index)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) )))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "lock_hatch" defined at hatch_system.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__lock_hatch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val lock_hatch 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
  requires {  ( [@GP_Pretty_Ada:3619] ( ((let temp___261 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_260 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_260 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_260 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___261 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:3176] ( ((let temp___265 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_264 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_264 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_264 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___265 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3186] ( ((let temp___267 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_266 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_266 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_266 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___267 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) ) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate lock_hatch__specific_post 
    (attr__tag : int) (hatch_system__lock_hatch__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (index : int) (hatch_system__lock_hatch__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val lock_hatch 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
   requires {  ( [@GP_Pretty_Ada:5253] ( ((let temp___263 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_262 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_262 = (Hatch_system__get_hatches.Dispatch.get_hatches (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.Dispatch.get_hatches__function_guard temp___result_262 (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___263 index)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(lock_hatch__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag index (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__lock_hatch__self__fields   hatch_system__lock_hatch__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   index   : int [(Dispatch.lock_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__lock_hatch__self__fields self__attr__tag index hatch_system__lock_hatch__self__old__fields)].
   ( (Dispatch.lock_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__lock_hatch__self__fields self__attr__tag index hatch_system__lock_hatch__self__old__fields) -> (let temp___self_270 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_270 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    ( ( [@GP_Pretty_Ada:3176] ( ((let temp___272 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_271 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_271 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_271 { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
     (Array__Int__Hatch_system__hatch.get temp___272 index)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3186] ( ((let temp___274 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_273 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_273 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_273 { Hatch_system__hatch_system.__split_fields = hatch_system__lock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
     (Array__Int__Hatch_system__hatch.get temp___274 index)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) )))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unlock_hatch" defined at hatch_system.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__unlock_hatch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val unlock_hatch 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
  requires {  ( [@GP_Pretty_Ada:3672] ( ((epsilon temp___result_275 : bool.
   ( (temp___result_275 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_275 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:3688] ( ((let temp___278 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_277 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_277 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_277 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___278 index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) ) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate unlock_hatch__specific_post 
    (attr__tag : int) (hatch_system__unlock_hatch__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (index : int) (hatch_system__unlock_hatch__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val unlock_hatch 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) (index : int) : unit
   requires {  ( [@GP_Pretty_Ada:5266] ( ((epsilon temp___result_276 : bool.
    ( (temp___result_276 = (Hatch_system__is_sealed.Dispatch.is_sealed (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.Dispatch.is_sealed__function_guard temp___result_276 (Hatch_system__hatch_system.attr__tag { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(unlock_hatch__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag index (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__unlock_hatch__self__fields   hatch_system__unlock_hatch__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   index   : int [(Dispatch.unlock_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__unlock_hatch__self__fields self__attr__tag index hatch_system__unlock_hatch__self__old__fields)].
   ( (Dispatch.unlock_hatch__specific_post Hatch_system__hatch_system.__tag hatch_system__unlock_hatch__self__fields self__attr__tag index hatch_system__unlock_hatch__self__old__fields) -> (let temp___self_281 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__unlock_hatch__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_281 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__unlock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    ( [@GP_Pretty_Ada:3688] ( ((let temp___283 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_282 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_282 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__unlock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_282 { Hatch_system__hatch_system.__split_fields = hatch_system__unlock_hatch__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
     (Array__Int__Hatch_system__hatch.get temp___283 index)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) )))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "seal" defined at hatch_system.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__seal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val seal 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) : unit
  requires {  true }
  ensures {  ( ( (forall i   [@model_trace:3258] [@name:I]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( ( [@GP_Pretty_Ada:3278] ( ((let temp___285 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_284 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_284 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_284 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___285 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3288] ( ((let temp___287 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_286 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_286 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_286 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___287 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) )) /\ ( [@GP_Pretty_Ada:3292] ((epsilon temp___result_288 : bool.
   ( (temp___result_288 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_288 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) ) ) /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) ) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate seal__specific_post 
    (attr__tag : int) (hatch_system__seal__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (hatch_system__seal__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val seal 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(seal__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__seal__self__fields   hatch_system__seal__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   : int [(Dispatch.seal__specific_post Hatch_system__hatch_system.__tag hatch_system__seal__self__fields self__attr__tag hatch_system__seal__self__old__fields)].
   ( (Dispatch.seal__specific_post Hatch_system__hatch_system.__tag hatch_system__seal__self__fields self__attr__tag hatch_system__seal__self__old__fields) -> (let temp___self_291 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_291 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    ( (forall i   [@model_trace:3258] [@name:I]  : int.
     ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( ( [@GP_Pretty_Ada:3278] ( ((let temp___293 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_292 : Array__Int__Hatch_system__hatch.map.
      ( (temp___result_292 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_292 { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
      (Array__Int__Hatch_system__hatch.get temp___293 i)))
     .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3288] ( ((let temp___295 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_294 : Array__Int__Hatch_system__hatch.map.
      ( (temp___result_294 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_294 { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
      (Array__Int__Hatch_system__hatch.get temp___295 i)))
     .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) )) /\ ( [@GP_Pretty_Ada:3292] ((epsilon temp___result_296 : bool.
     ( (temp___result_296 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_296 { Hatch_system__hatch_system.__split_fields = hatch_system__seal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) ) )))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unseal" defined at hatch_system.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Hatch_system__unseal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 val unseal 
   (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) : unit
  requires {  true }
  ensures {  ( ( (forall i   [@name:I] [@model_trace:3316]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( [@GP_Pretty_Ada:3336] ( ((let temp___298 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_297 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_297 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_297 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___298 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) )) /\ ( [@GP_Pretty_Ada:3342] ( ((epsilon temp___result_299 : bool.
   ( (temp___result_299 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_299 { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) ) /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) ) }
  writes {self__split_fields}
 
 scope Dispatch
  val predicate unseal__specific_post 
    (attr__tag : int) (hatch_system__unseal__self__fields : Hatch_system__hatch_system.__split_fields) (self__attr__tag : int) (hatch_system__unseal__self__old__fields : Hatch_system__hatch_system.__split_fields)
  
  val unseal 
    (self__split_fields : Hatch_system__hatch_system.__split_fields__ref) (self__attr__tag : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = self__attr__tag } True True True True) )/\(unseal__specific_post self__attr__tag self__split_fields.Hatch_system__hatch_system.__split_fields__content self__attr__tag (old self__split_fields.Hatch_system__hatch_system.__split_fields__content )) ) }
   writes {self__split_fields}

 end
 
 axiom hatch_system__hatch_system__compat_axiom :
  (forall hatch_system__unseal__self__fields   hatch_system__unseal__self__old__fields   : Hatch_system__hatch_system.__split_fields.
  (forall self__attr__tag   : int [(Dispatch.unseal__specific_post Hatch_system__hatch_system.__tag hatch_system__unseal__self__fields self__attr__tag hatch_system__unseal__self__old__fields)].
   ( (Dispatch.unseal__specific_post Hatch_system__hatch_system.__tag hatch_system__unseal__self__fields self__attr__tag hatch_system__unseal__self__old__fields) -> (let temp___self_302 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__old__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
   (let temp___self_302 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag } in (
    ( (forall i   [@name:I] [@model_trace:3316]  : int.
     ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( [@GP_Pretty_Ada:3336] ( ((let temp___304 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_303 : Array__Int__Hatch_system__hatch.map.
      ( (temp___result_303 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_303 { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) in (
      (Array__Int__Hatch_system__hatch.get temp___304 i)))
     .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) )) /\ ( [@GP_Pretty_Ada:3342] ( ((epsilon temp___result_305 : bool.
     ( (temp___result_305 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_305 { Hatch_system__hatch_system.__split_fields = hatch_system__unseal__self__fields; Hatch_system__hatch_system.attr__tag = self__attr__tag }) )) = True) <-> false ) ) )))
   ))
    )))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "hatch_system" defined at hatch_system.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Hatch_system__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [#"hatch_system.ads" 1 0 0][@GP_Subp:hatch_system.ads:1] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 1 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"hatch_system.ads" 1 0 0] ());
  ([#"hatch_system.ads" 3 0 0] ());
  ([#"hatch_system.ads" 8 0 0] ());
  ([#"hatch_system.ads" 9 0 0] ());
  ([#"hatch_system.ads" 11 0 0] ());
  ([#"hatch_system.ads" 13 0 0] ());
  ([#"hatch_system.ads" 15 0 0] ());
  ([#"hatch_system.ads" 17 0 0] ());
  ([#"hatch_system.ads" 19 0 0] ());
  ([#"hatch_system.ads" 25 0 0] ());
  ([#"hatch_system.ads" 24 0 0] ());
  ([#"hatch_system.ads" 27 0 0] ());
  ([#"hatch_system.ads" 29 0 0] ());
  ([#"hatch_system.ads" 31 0 0] ());
  ([#"hatch_system.ads" 32 0 0] ());
  ([#"hatch_system.ads" 36 0 0] ());
  ([#"hatch_system.ads" 37 0 0] ());
  ([#"hatch_system.ads" 39 0 0] ());
  ([#"hatch_system.ads" 41 0 0] ());
  ([#"hatch_system.ads" 40 0 0] ());
  ([#"hatch_system.ads" 43 0 0] ());
  ([#"hatch_system.ads" 45 0 0] ());
  ([#"hatch_system.ads" 44 0 0] ());
  ([#"hatch_system.ads" 47 0 0] ());
  ([#"hatch_system.ads" 48 0 0] ());
  ([#"hatch_system.ads" 52 0 0] ());
  ([#"hatch_system.ads" 53 0 0] ());
  ();
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 58 0 0] ());
  ([#"hatch_system.ads" 19 0 0] ());
  ([#"hatch_system.ads" 24 0 0] ());
  ();
  ([#"hatch_system.adb" 1 0 0] ());
  ([#"hatch_system.adb" 3 0 0] ());
  ([#"hatch_system.adb" 13 0 0] ());
  ([#"hatch_system.adb" 30 0 0] ());
  ([#"hatch_system.adb" 36 0 0] ());
  ([#"hatch_system.adb" 42 0 0] ());
  ([#"hatch_system.adb" 53 0 0] ());
  ([#"hatch_system.adb" 58 0 0] ());
  ([#"hatch_system.adb" 67 0 0] ());
  ([#"hatch_system.adb" 76 0 0] ());
  ([#"hatch_system.adb" 86 0 0] ());
  ();
  ( [@GP_Sloc:hatch_system.adb:95:1] ([#"hatch_system.adb" 95 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "hatch_system" defined at hatch_system.ads:13, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Hatch_system__hatch_system__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index as Hatch_system__hatch_index
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [@GP_Subp:hatch_system.ads:13] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___306 [@mlw:proxy_symbol] [@introduced] =  (val _f : Hatch_system__hatch_system.hatch_system
  ensures { true} 
  in _f) in (
   ( ();
   (if ((Hatch_system__hatch_system.hatch_system__hatch_system__h__pred(temp___306))) then (
     begin ensures {true} let _ = (let _ = (if (((Integer.length(Hatch_system__hatch_index.first) (Hatch_system__hatch_index.last)) > (0 : int))) then (
      begin ensures {true} let _ = (let _ = (let temp___307 [@mlw:proxy_symbol] [@introduced] =  (val _f : Hatch_system__hatch.hatch
     ensures { true} 
     in _f) in (
      ( () )))
      in (
      ()))
      in () end )) in (
     ()))
     in () end )) )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "get_hatches" defined at hatch_system.ads:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__get_hatches__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__get_hatches__self as Hatch_system__get_hatches__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches__self___axiom as Hatch_system__get_hatches__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__get_hatches__result [@name:Get_Hatches] [@model_projected] [@model_trace:2902@result]  : Array__Int__Hatch_system__hatch.map__ref 
 
 let def [#"hatch_system.ads" 15 0 0][@GP_Subp:hatch_system.ads:15] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 15 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:15 *)
  ;
  [#"hatch_system.ads" 15 0 0] assume { [#"hatch_system.ads" 15 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__get_hatches__self.self True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:15 *)
  ;
  [#"hatch_system.ads" 15 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:15 *)
  ;
  [#"hatch_system.ads" 15 0 0] try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:33:5] ([#"hatch_system.adb" 33 0 0] ( [#"hatch_system.adb" 33 0 0] (hatch_system__get_hatches__result.Array__Int__Hatch_system__hatch.map__content <- ( Hatch_system__get_hatches__self.self.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h ));
   [#"hatch_system.adb" 33 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__get_hatches__result.Array__Int__Hatch_system__hatch.map__content )
end

(* Module for checking LSP for subprogram "get_hatches" defined at hatch_system.ads:15, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__get_hatches__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__get_hatches__self as Hatch_system__get_hatches__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches__self___axiom as Hatch_system__get_hatches__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__get_hatches__result [@name:Get_Hatches] [@model_projected] [@model_trace:2902@result]  : Array__Int__Hatch_system__hatch.map__ref 
 
 let def [#"hatch_system.ads" 15 0 0][@GP_Subp:hatch_system.ads:15] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 15 0 0] true }
  ensures { [#"hatch_system.ads" 15 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 15 0 0] assume { [#"hatch_system.ads" 15 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__get_hatches__self.self True False True True) }
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_status" defined at hatch_system.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__get_status__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__get_status__self as Hatch_system__get_status__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__status as Hatch_system__status
 use        Hatch_system__status__rep as Hatch_system__status__rep
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_status__self___axiom as Hatch_system__get_status__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__get_status__result [@model_projected] [@name:Get_Status] [@model_trace:2921@result]  : int__ref 
 
 let def [#"hatch_system.ads" 17 0 0][@GP_Subp:hatch_system.ads:17] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 17 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:17 *)
  ;
  [#"hatch_system.ads" 17 0 0] assume { [#"hatch_system.ads" 17 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__get_status__self.self True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:17 *)
  ;
  [#"hatch_system.ads" 17 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:17 *)
  ;
  [#"hatch_system.ads" 17 0 0] try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:39:5] ([#"hatch_system.adb" 39 0 0] ( [#"hatch_system.adb" 39 0 0] (hatch_system__get_status__result.int__content <- ( (Hatch_system__status__rep.to_rep(Hatch_system__get_status__self.self.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__s)) ));
   [#"hatch_system.adb" 39 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__get_status__result.int__content )
end

(* Module for checking LSP for subprogram "get_status" defined at hatch_system.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__get_status__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__get_status__self as Hatch_system__get_status__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_status__self___axiom as Hatch_system__get_status__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__get_status__result [@model_projected] [@name:Get_Status] [@model_trace:2921@result]  : int__ref 
 
 let def [#"hatch_system.ads" 17 0 0][@GP_Subp:hatch_system.ads:17] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 17 0 0] true }
  ensures { [#"hatch_system.ads" 17 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 17 0 0] assume { [#"hatch_system.ads" 17 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__get_status__self.self True False True True) }
end

(* Module for checking contracts and absence of run-time errors in subprogram "at_least_one_hatch_is_closed" defined at hatch_system.ads:19, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__at_least_one_hatch_is_closed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__at_least_one_hatch_is_closed__self as Hatch_system__at_least_one_hatch_is_closed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__at_least_one_hatch_is_closed__self___axiom as Hatch_system__at_least_one_hatch_is_closed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__at_least_one_hatch_is_closed__result [@model_trace:2940@result] [@name:At_Least_One_Hatch_Is_Closed] [@model_projected]  : bool__ref 
 
 let def [#"hatch_system.ads" 19 0 0][@GP_Subp:hatch_system.ads:19] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 19 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:19 *)
  ;
  [#"hatch_system.ads" 19 0 0] assume { [#"hatch_system.ads" 19 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__at_least_one_hatch_is_closed__self.self True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:19 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:19 *)
  ;
  [#"hatch_system.ads" 19 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:19 *)
  ;
  [#"hatch_system.ads" 19 0 0] try
   ( ();
   ( [@GP_Sloc:hatch_system.ads:21:6] ([#"hatch_system.ads" 21 0 0] ( [#"hatch_system.ads" 21 0 0] (hatch_system__at_least_one_hatch_is_closed__result.bool__content <- ( ( (let i = [#"hatch_system.ads" 21 0 0] (val _f : int
   in _f) in (
    (if ((Boolean.andb(((0 : int) <= i)) ((i <= (1 : int))))) then (
     [#"hatch_system.ads" 21 0 0] begin ensures {true} let _ = (let _ = ((Boolean.to_int((let temp___311 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches(Hatch_system__at_least_one_hatch_is_closed__self.self)) in (
      (Array__Int__Hatch_system__hatch.get(temp___311) (i))))
     .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) in (
      ()))
      in () end ))))
   ;
   [#"hatch_system.ads" 21 0 0] (val _f : bool
   ensures {[#"hatch_system.ads" 21 0 0] ( (result = True) <-> (exists i  : int.
    ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) /\ ( ((let temp___313 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_312 : Array__Int__Hatch_system__hatch.map.
     ( (temp___result_312 = (Hatch_system__get_hatches.get_hatches Hatch_system__at_least_one_hatch_is_closed__self.self)) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_312 Hatch_system__at_least_one_hatch_is_closed__self.self) )) in (
     (Array__Int__Hatch_system__hatch.get temp___313 i)))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) )) )} 
   in _f) ) ));
   [#"hatch_system.ads" 21 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__at_least_one_hatch_is_closed__result.bool__content )
end

(* Module for checking LSP for subprogram "at_least_one_hatch_is_closed" defined at hatch_system.ads:19, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__at_least_one_hatch_is_closed__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__at_least_one_hatch_is_closed__self as Hatch_system__at_least_one_hatch_is_closed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__at_least_one_hatch_is_closed__self___axiom as Hatch_system__at_least_one_hatch_is_closed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__at_least_one_hatch_is_closed__result [@model_trace:2940@result] [@name:At_Least_One_Hatch_Is_Closed] [@model_projected]  : bool__ref 
 
 let def [#"hatch_system.ads" 19 0 0][@GP_Subp:hatch_system.ads:19] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 19 0 0] true }
  ensures { [#"hatch_system.ads" 19 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 19 0 0] assume { [#"hatch_system.ads" 19 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__at_least_one_hatch_is_closed__self.self True False True True) }
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_sealed" defined at hatch_system.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__is_sealed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed__self as Hatch_system__is_sealed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed__self___axiom as Hatch_system__is_sealed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__is_sealed__result [@name:Is_Sealed] [@model_trace:2981@result] [@model_projected]  : bool__ref 
 
 let def [#"hatch_system.ads" 24 0 0][@GP_Subp:hatch_system.ads:24] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 24 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:24 *)
  ;
  [#"hatch_system.ads" 24 0 0] assume { [#"hatch_system.ads" 24 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__is_sealed__self.self True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:24 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:24 *)
  ;
  [#"hatch_system.ads" 24 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:24 *)
  ;
  [#"hatch_system.ads" 24 0 0] try
   ( ();
   ( [@GP_Sloc:hatch_system.ads:25:13] ([#"hatch_system.ads" 25 0 0] ()) );
   ( [@GP_Sloc:hatch_system.ads:25:25] ([#"hatch_system.ads" 25 0 0] ( [#"hatch_system.ads" 25 0 0] (hatch_system__is_sealed__result.bool__content <- ( ((Hatch_system__get_status___axiom.get_status(Hatch_system__is_sealed__self.self)) = (0 : int)) ));
   [#"hatch_system.ads" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__is_sealed__result.bool__content )
end

(* Module for checking LSP for subprogram "is_sealed" defined at hatch_system.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__is_sealed__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__is_sealed__self as Hatch_system__is_sealed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__is_sealed__self___axiom as Hatch_system__is_sealed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__is_sealed__result [@name:Is_Sealed] [@model_trace:2981@result] [@model_projected]  : bool__ref 
 
 let def [#"hatch_system.ads" 24 0 0][@GP_Subp:hatch_system.ads:24] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 24 0 0] true }
  ensures { [#"hatch_system.ads" 24 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 24 0 0] assume { [#"hatch_system.ads" 24 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__is_sealed__self.self True False True True) }
end

(* Module for checking contracts and absence of run-time errors in subprogram "more_than_one_hatches_are_closed" defined at hatch_system.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__more_than_one_hatches_are_closed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__more_than_one_hatches_are_closed__self as Hatch_system__more_than_one_hatches_are_closed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__count as Hatch_system__more_than_one_hatches_are_closed__count
 use        Hatch_system__more_than_one_hatches_are_closed__L_1__i as Hatch_system__more_than_one_hatches_are_closed__L_1__i
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__more_than_one_hatches_are_closed__L_1 as Hatch_system__more_than_one_hatches_are_closed__L_1
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__count___axiom as Hatch_system__more_than_one_hatches_are_closed__count___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__L_1__i___axiom as Hatch_system__more_than_one_hatches_are_closed__L_1__i___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__L_1___axiom as Hatch_system__more_than_one_hatches_are_closed__L_1___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__self___axiom as Hatch_system__more_than_one_hatches_are_closed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__more_than_one_hatches_are_closed__result [@model_projected] [@model_trace:3005@result] [@name:More_Than_One_Hatches_Are_Closed]  : bool__ref 
 
 let def [#"hatch_system.ads" 27 0 0][@GP_Subp:hatch_system.ads:27] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 27 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:27 *)
  ;
  [#"hatch_system.ads" 27 0 0] assume { [#"hatch_system.ads" 27 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__more_than_one_hatches_are_closed__self.self True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:27 *)
  ;
  [#"hatch_system.ads" 27 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:27 *)
  ;
  [#"hatch_system.ads" 27 0 0] try
   ( ();
   ([#"hatch_system.adb" 15 0 0] ( [#"hatch_system.adb" 15 0 0] (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content <- ( (0 : int) ));
   [#"hatch_system.adb" 15 0 0] assume { [#"hatch_system.adb" 15 0 0] (Standard__integer___axiom.dynamic_invariant Hatch_system__more_than_one_hatches_are_closed__count.count.int__content True False True True) } ));
   ([#"hatch_system.adb" 17 0 0] ());
   ();
   ( [@GP_Sloc:hatch_system.adb:17:27] ([#"hatch_system.adb" 17 0 0] (let temp___316 [@mlw:proxy_symbol] [@introduced] = (0 : int) in (
   (let temp___317 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    ( () (* Translation of an Ada loop from hatch_system.adb:17 *)
    ;
    [#"hatch_system.adb" 17 0 0] try
     ( [#"hatch_system.adb" 17 0 0] begin ensures {true} let _ = (let _ = Hatch_system__more_than_one_hatches_are_closed__count.count.int__content in (
      ()))
      in () end ;
     (let temp___319 [@mlw:proxy_symbol] [@introduced] = [#"hatch_system.adb" 17 0 0] (val _f : int
     ensures {[#"hatch_system.adb" 17 0 0] (result = Hatch_system__more_than_one_hatches_are_closed__count.count.int__content)} 
     in _f) in (
      ( () (* Unrolling of the loop statements of loop hatch_system.adb:17 *)
      ;
      [#"hatch_system.adb" 17 0 0] (Hatch_system__more_than_one_hatches_are_closed__L_1__i.i.int__content <- ( (0 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:18:10] ([#"hatch_system.adb" 18 0 0] ()) );
      ( [@GP_Sloc:hatch_system.adb:18:7] ([#"hatch_system.adb" 18 0 0] (if (( ([#"hatch_system.adb" 18 0 0] [#"hatch_system.adb" 18 0 0] (([@branch_id=2396] Main.spark__branch).bool__content <- ( (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content > (1 : int)) )));
      ( [@branch_id=2396] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:hatch_system.adb:19:9] ([#"hatch_system.adb" 19 0 0] [#"hatch_system.adb" 19 0 0] raise Hatch_system__more_than_one_hatches_are_closed__L_1.L_1) ) )) else (
       ()))) );
      ( [@GP_Sloc:hatch_system.adb:22:7] ([#"hatch_system.adb" 22 0 0] (if (( ([#"hatch_system.adb" 22 0 0] [#"hatch_system.adb" 22 0 0] (([@branch_id=2401] Main.spark__branch).bool__content <- ( ((Boolean.to_int((let temp___318 [@mlw:proxy_symbol] [@introduced] = Hatch_system__more_than_one_hatches_are_closed__self.self.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
       (Array__Int__Hatch_system__hatch.get(temp___318) (Hatch_system__more_than_one_hatches_are_closed__L_1__i.i.int__content))))
      .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) )));
      ( [@branch_id=2401] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:hatch_system.adb:23:9] ([#"hatch_system.adb" 23 0 0] ()) );
       ( [@GP_Sloc:hatch_system.adb:23:18] ([#"hatch_system.adb" 23 0 0] ()) );
       ( [@GP_Sloc:hatch_system.adb:23:15] ([#"hatch_system.adb" 23 0 0] [#"hatch_system.adb" 23 0 0] (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content <- ( ([#"hatch_system.adb" 23 0 0] ( [@GP_Shape:L_1_while__if__count_assign__add] [@comment:        Count := Count + 1;                        ^ hatch_system.adb:23:24:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:hatch_system.adb:23:24] [@GP_Id:0] (Standard__integer.range_check_((Hatch_system__more_than_one_hatches_are_closed__count.count.int__content + (1 : int)))) )) ))) ) )) else (
       ()))) );
       (Hatch_system__more_than_one_hatches_are_closed__L_1__i.i.int__content <- ( (1 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:18:10] ([#"hatch_system.adb" 18 0 0] ()) );
      ( [@GP_Sloc:hatch_system.adb:18:7] ([#"hatch_system.adb" 18 0 0] (if (( ([#"hatch_system.adb" 18 0 0] [#"hatch_system.adb" 18 0 0] (([@branch_id=2396] Main.spark__branch).bool__content <- ( (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content > (1 : int)) )));
      ( [@branch_id=2396] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:hatch_system.adb:19:9] ([#"hatch_system.adb" 19 0 0] [#"hatch_system.adb" 19 0 0] raise Hatch_system__more_than_one_hatches_are_closed__L_1.L_1) ) )) else (
       ()))) );
      ( [@GP_Sloc:hatch_system.adb:22:7] ([#"hatch_system.adb" 22 0 0] (if (( ([#"hatch_system.adb" 22 0 0] [#"hatch_system.adb" 22 0 0] (([@branch_id=2401] Main.spark__branch).bool__content <- ( ((Boolean.to_int((let temp___318 [@mlw:proxy_symbol] [@introduced] = Hatch_system__more_than_one_hatches_are_closed__self.self.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
       (Array__Int__Hatch_system__hatch.get(temp___318) (Hatch_system__more_than_one_hatches_are_closed__L_1__i.i.int__content))))
      .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) )));
      ( [@branch_id=2401] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:hatch_system.adb:23:9] ([#"hatch_system.adb" 23 0 0] ()) );
       ( [@GP_Sloc:hatch_system.adb:23:18] ([#"hatch_system.adb" 23 0 0] ()) );
       ( [@GP_Sloc:hatch_system.adb:23:15] ([#"hatch_system.adb" 23 0 0] [#"hatch_system.adb" 23 0 0] (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content <- ( ([#"hatch_system.adb" 23 0 0] ( [@GP_Shape:L_1_while__if__count_assign__add] [@comment:        Count := Count + 1;                        ^ hatch_system.adb:23:24:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:hatch_system.adb:23:24] [@GP_Id:0] (Standard__integer.range_check_((Hatch_system__more_than_one_hatches_are_closed__count.count.int__content + (1 : int)))) )) ))) ) )) else (
       ()))) ) )))
      )
    with
     Hatch_system__more_than_one_hatches_are_closed__L_1.L_1 -> ()
    end )))
   ))
   ) );
   ( [@GP_Sloc:hatch_system.adb:27:12] ([#"hatch_system.adb" 27 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:27:5] ([#"hatch_system.adb" 27 0 0] ( [#"hatch_system.adb" 27 0 0] (hatch_system__more_than_one_hatches_are_closed__result.bool__content <- ( (Hatch_system__more_than_one_hatches_are_closed__count.count.int__content > (1 : int)) ));
   [#"hatch_system.adb" 27 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__more_than_one_hatches_are_closed__result.bool__content )
end

(* Module for checking LSP for subprogram "more_than_one_hatches_are_closed" defined at hatch_system.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__more_than_one_hatches_are_closed__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__more_than_one_hatches_are_closed__self as Hatch_system__more_than_one_hatches_are_closed__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__more_than_one_hatches_are_closed__self___axiom as Hatch_system__more_than_one_hatches_are_closed__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__more_than_one_hatches_are_closed__result [@model_projected] [@model_trace:3005@result] [@name:More_Than_One_Hatches_Are_Closed]  : bool__ref 
 
 let def [#"hatch_system.ads" 27 0 0][@GP_Subp:hatch_system.ads:27] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 27 0 0] true }
  ensures { [#"hatch_system.ads" 27 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 27 0 0] assume { [#"hatch_system.ads" 27 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant Hatch_system__more_than_one_hatches_are_closed__self.self True False True True) }
end

(* Module for defining the value of the aggregate at hatch_system.adb:7, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_324___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Temp_____aggregate_def_324 as Temp_____aggregate_def_324
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch

 axiom def_axiom :
  (forall temp___326   : Hatch_system__hatch.hatch.
   (let temp___325 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_324.temp_____aggregate_def_324 temp___326) in (
    (if ((Hatch_system__hatch___axiom.dynamic_invariant temp___326 True True True True)) then (
     (forall temp___327   : int.
      ((Array__Int__Hatch_system__hatch.get temp___325 temp___327) = temp___326))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "create" defined at hatch_system.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__create__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__create__self as Hatch_system__create__self
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index as Hatch_system__hatch_index
 use        Hatch_system__status as Hatch_system__status
 use        Hatch_system__status__rep as Hatch_system__status__rep
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Temp_____aggregate_def_324 as Temp_____aggregate_def_324
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__create__self___axiom as Hatch_system__create__self___axiom
 use        Temp_____aggregate_def_324___axiom as Temp_____aggregate_def_324___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__create__result [@model_projected] [@name:Create] [@model_trace:3024@result]  : Hatch_system__hatch_system.hatch_system__ref 
 
 let def [#"hatch_system.ads" 29 0 0][@GP_Subp:hatch_system.ads:29] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 29 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:29 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:29 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:29 *)
  ;
  [#"hatch_system.ads" 29 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:29 *)
  ;
  [#"hatch_system.ads" 29 0 0] try
   ( ();
   ([#"hatch_system.adb" 5 0 0] ( [#"hatch_system.adb" 5 0 0] begin ensures {true} let _ = (let _ = (let temp___321 [@mlw:proxy_symbol] [@introduced] = [#"hatch_system.adb" 5 0 0] (val _f : Hatch_system__hatch_system.hatch_system
   ensures {[#"hatch_system.adb" 5 0 0] true} 
   in _f) in (
    ( ();
    (if ((Hatch_system__hatch_system.hatch_system__hatch_system__h__pred(temp___321))) then (
     [#"hatch_system.adb" 5 0 0] begin ensures {true} let _ = (let _ = (if (((Integer.length(Hatch_system__hatch_index.first) (Hatch_system__hatch_index.last)) > (0 : int))) then (
      [#"hatch_system.adb" 5 0 0] begin ensures {true} let _ = (let _ = (let temp___322 [@mlw:proxy_symbol] [@introduced] = [#"hatch_system.adb" 5 0 0] (val _f : Hatch_system__hatch.hatch
      ensures {[#"hatch_system.adb" 5 0 0] true} 
      in _f) in (
       ( () )))
       in (
       ()))
       in () end )) in (
      ()))
      in () end )) )))
    in (
    ()))
    in () end ;
   [#"hatch_system.adb" 5 0 0] assume { [#"hatch_system.adb" 5 0 0] (Hatch_system__hatch_system___axiom.default_initial_assumption { Hatch_system__hatch_system.__split_fields = Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__create__self.self__attr__tag } False) };
   [#"hatch_system.adb" 5 0 0] assume { [#"hatch_system.adb" 5 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__create__self.self__attr__tag } False False True True) } ));
   ();
   ( [@GP_Sloc:hatch_system.adb:7:5] ([#"hatch_system.adb" 7 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:7:12] ([#"hatch_system.adb" 7 0 0] (let temp___329 [@mlw:proxy_symbol] [@introduced] = (let temp___328 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__create__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 7 0 0] begin ensures {true} let _ = (let _ = temp___328.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     ()))
     in () end ;
    { ( temp___328 ) with Hatch_system__hatch_system.__split_fields = { ( temp___328.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (Temp_____aggregate_def_324.temp_____aggregate_def_324({ Hatch_system__hatch.__split_fields = { Hatch_system__hatch.rec__hatch_system__hatch__closed = (Boolean.of_int((1 : int))); Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((0 : int))) } })) } } )))
    in (
    [#"hatch_system.adb" 7 0 0] (Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___329.Hatch_system__hatch_system.__split_fields ))))
   ) );
   ( [@GP_Sloc:hatch_system.adb:8:5] ([#"hatch_system.adb" 8 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:8:12] ([#"hatch_system.adb" 8 0 0] (let temp___331 [@mlw:proxy_symbol] [@introduced] = (let temp___330 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__create__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___330.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__s in (
     ()))
     in () end ;
    { ( temp___330 ) with Hatch_system__hatch_system.__split_fields = { ( temp___330.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__s = (Hatch_system__status__rep.of_rep((1 : int))) } } )))
    in (
    [#"hatch_system.adb" 8 0 0] (Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___331.Hatch_system__hatch_system.__split_fields ))))
   ) );
   ( [@GP_Sloc:hatch_system.adb:10:12] ([#"hatch_system.adb" 10 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:10:5] ([#"hatch_system.adb" 10 0 0] ( [#"hatch_system.adb" 10 0 0] (hatch_system__create__result.Hatch_system__hatch_system.hatch_system__content <- ( { Hatch_system__hatch_system.__split_fields = Hatch_system__create__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__create__self.self__attr__tag } ));
   [#"hatch_system.adb" 10 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  hatch_system__create__result.Hatch_system__hatch_system.hatch_system__content )
end

(* Module for checking LSP for subprogram "create" defined at hatch_system.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__create__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 val hatch_system__create__result [@model_projected] [@name:Create] [@model_trace:3024@result]  : Hatch_system__hatch_system.hatch_system__ref 
 
 let def [#"hatch_system.ads" 29 0 0][@GP_Subp:hatch_system.ads:29] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 29 0 0] true }
  ensures { [#"hatch_system.ads" 29 0 0] true }
   = [@vc:divergent]
  ()
end

(* Module for checking contracts and absence of run-time errors in subprogram "open_hatch" defined at hatch_system.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__open_hatch__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__more_than_one_hatches_are_closed as Hatch_system__more_than_one_hatches_are_closed
 use        Hatch_system__more_than_one_hatches_are_closed___axiom as Hatch_system__more_than_one_hatches_are_closed___axiom
 use        Hatch_system__open_hatch__self as Hatch_system__open_hatch__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__open_hatch__index as Hatch_system__open_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__more_than_one_hatches_are_closed___axiom as Hatch_system__more_than_one_hatches_are_closed___axiom
 use        Hatch_system__open_hatch__self___axiom as Hatch_system__open_hatch__self___axiom
 use        Hatch_system__open_hatch__index___axiom as Hatch_system__open_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 31 0 0][@GP_Subp:hatch_system.ads:31] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 31 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:31 *)
  ;
  [#"hatch_system.ads" 31 0 0] assume { [#"hatch_system.ads" 31 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag } True False True True) };
  [#"hatch_system.ads" 31 0 0] assume { [#"hatch_system.ads" 31 0 0] (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__open_hatch__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:31 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:31 *)
  ;
  [#"hatch_system.ads" 31 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:31 *)
  ;
  [#"hatch_system.ads" 31 0 0] assume { [#"hatch_system.ads" 31 0 0] ( ( ( [@GP_Pretty_Ada:3070] ( ((epsilon temp___result_341 : bool.
   ( (temp___result_341 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_341 { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }) )) = True) <-> false ) ) /\ ( [@GP_Pretty_Ada:3080] ( ((let temp___343 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_342 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_342 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_342 { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___343 Hatch_system__open_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) ) /\ ( [@GP_Pretty_Ada:3084] ((epsilon temp___result_344 : bool.
   ( (temp___result_344 = (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) /\ (Hatch_system__more_than_one_hatches_are_closed.more_than_one_hatches_are_closed__function_guard temp___result_344 { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }) )) = True) ) ) };
  [#"hatch_system.ads" 31 0 0] try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:44:8] ([#"hatch_system.adb" 44 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:44:5] ([#"hatch_system.adb" 44 0 0] (if (( ([#"hatch_system.adb" 44 0 0] [#"hatch_system.adb" 44 0 0] (([@branch_id=2500] Main.spark__branch).bool__content <- ( (Boolean.orb((Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }))) (((Boolean.to_int((let temp___333 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
    (Array__Int__Hatch_system__hatch.get(temp___333) (Hatch_system__open_hatch__index.index))))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((1 : int)))))))) )));
   ( [@branch_id=2500] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:hatch_system.adb:45:7] ([#"hatch_system.adb" 45 0 0] [#"hatch_system.adb" 45 0 0] raise Return__exc) ) )) else (
    ()))) );
   ( [@GP_Sloc:hatch_system.adb:48:8] ([#"hatch_system.adb" 48 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:48:5] ([#"hatch_system.adb" 48 0 0] (if (( ([#"hatch_system.adb" 48 0 0] [#"hatch_system.adb" 48 0 0] (([@branch_id=2515] Main.spark__branch).bool__content <- ( (Hatch_system__more_than_one_hatches_are_closed___axiom.more_than_one_hatches_are_closed({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) )));
   ( [@branch_id=2515] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:hatch_system.adb:49:28] ([#"hatch_system.adb" 49 0 0] (let temp___338 [@mlw:proxy_symbol] [@introduced] = (let temp___337 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag } in (
     ( [#"hatch_system.adb" 49 0 0] begin ensures {true} let _ = (let _ = temp___337.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
      ()))
      in () end ;
     { ( temp___337 ) with Hatch_system__hatch_system.__split_fields = { ( temp___337.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___336 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
      (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__open_hatch__index.index) ((let temp___335 [@mlw:proxy_symbol] [@introduced] = (let temp___334 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
       (Array__Int__Hatch_system__hatch.get temp___334 Hatch_system__open_hatch__index.index)))
       in (
       ( [#"hatch_system.adb" 49 0 0] begin ensures {true} let _ = (let _ = temp___335.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed in (
        ()))
        in () end ;
       { ( temp___335 ) with Hatch_system__hatch.__split_fields = { ( temp___335.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__closed = (Boolean.of_int((0 : int))) } } )))
      ))))
      } } )))
     in (
     [#"hatch_system.adb" 49 0 0] (Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___338.Hatch_system__hatch_system.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "open_hatch" defined at hatch_system.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__open_hatch__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__more_than_one_hatches_are_closed___axiom as Hatch_system__more_than_one_hatches_are_closed___axiom
 use        Hatch_system__open_hatch__self as Hatch_system__open_hatch__self
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__open_hatch__index as Hatch_system__open_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__more_than_one_hatches_are_closed___axiom as Hatch_system__more_than_one_hatches_are_closed___axiom
 use        Hatch_system__open_hatch__self___axiom as Hatch_system__open_hatch__self___axiom
 use        Hatch_system__open_hatch__index___axiom as Hatch_system__open_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 31 0 0][@GP_Subp:hatch_system.ads:31] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 31 0 0] true }
  ensures { [#"hatch_system.ads" 31 0 0] true }
   = [@vc:divergent]
  ( [#"hatch_system.ads" 31 0 0] assume { [#"hatch_system.ads" 31 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag } True False True True) };
  [#"hatch_system.ads" 31 0 0] assume { [#"hatch_system.ads" 31 0 0] (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__open_hatch__index.index True False True True) };
  [#"hatch_system.ads" 31 0 0] begin ensures {true} let _ = (let _ = ( ( ((Boolean.to_int((Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })))) = (Boolean.to_int((Boolean.of_int((0 : int)))))) && ((Boolean.to_int((let temp___349 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___349) (Hatch_system__open_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) ) && (Hatch_system__more_than_one_hatches_are_closed___axiom.more_than_one_hatches_are_closed({ Hatch_system__hatch_system.__split_fields = Hatch_system__open_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__open_hatch__self.self__attr__tag })) ) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "close_hatch" defined at hatch_system.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__close_hatch__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__close_hatch__self as Hatch_system__close_hatch__self
 use        Hatch_system__close_hatch__index as Hatch_system__close_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__close_hatch__self___axiom as Hatch_system__close_hatch__self___axiom
 use        Hatch_system__close_hatch__index___axiom as Hatch_system__close_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 36 0 0][@GP_Subp:hatch_system.ads:36] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 36 0 0] true }
  ensures { [#"hatch_system.ads" 36 0 0] ([#"hatch_system.ads" 37 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:hatch_system.ads:37:13] [@model_vc_post] [@comment:    Post => Self.Get_Hatches(Index).Closed = True;             ^ hatch_system.ads:37:13:VC_POSTCONDITION] [@GP_Id:1] ( [@GP_Sloc:hatch_system.ads:37:13] [@GP_Pretty_Ada:3595] ( ((let temp___359 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_358 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_358 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_358 { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___359 Hatch_system__close_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:36 *)
  ;
   assume {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag } True False True True) };
   assume {  (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__close_hatch__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:36 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:36 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:36 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:55:26] ([#"hatch_system.adb" 55 0 0] (let temp___354 [@mlw:proxy_symbol] [@introduced] = (let temp___353 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 55 0 0] begin ensures {true} let _ = (let _ = temp___353.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     ()))
     in () end ;
    { ( temp___353 ) with Hatch_system__hatch_system.__split_fields = { ( temp___353.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___352 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__close_hatch__index.index) ((let temp___351 [@mlw:proxy_symbol] [@introduced] = (let temp___350 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
      (Array__Int__Hatch_system__hatch.get temp___350 Hatch_system__close_hatch__index.index)))
      in (
      ( [#"hatch_system.adb" 55 0 0] begin ensures {true} let _ = (let _ = temp___351.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed in (
       ()))
       in () end ;
      { ( temp___351 ) with Hatch_system__hatch.__split_fields = { ( temp___351.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__closed = (Boolean.of_int((1 : int))) } } )))
     ))))
     } } )))
    in (
    [#"hatch_system.adb" 55 0 0] (Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___354.Hatch_system__hatch_system.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int((let temp___356 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___356) (Hatch_system__close_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "close_hatch" defined at hatch_system.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__close_hatch__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__close_hatch__self as Hatch_system__close_hatch__self
 use        Hatch_system__close_hatch__index as Hatch_system__close_hatch__index
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__close_hatch__self___axiom as Hatch_system__close_hatch__self___axiom
 use        Hatch_system__close_hatch__index___axiom as Hatch_system__close_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 36 0 0][@GP_Subp:hatch_system.ads:36] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 36 0 0] true }
  ensures { [#"hatch_system.ads" 36 0 0] true }
   = [@vc:divergent]
  ( [#"hatch_system.ads" 36 0 0] assume { [#"hatch_system.ads" 36 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__close_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__close_hatch__self.self__attr__tag } True False True True) };
  [#"hatch_system.ads" 36 0 0] assume { [#"hatch_system.ads" 36 0 0] (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__close_hatch__index.index True False True True) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lock_hatch" defined at hatch_system.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__lock_hatch__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__lock_hatch__self as Hatch_system__lock_hatch__self
 use        Hatch_system__lock_hatch__index as Hatch_system__lock_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__lock_hatch__self___axiom as Hatch_system__lock_hatch__self___axiom
 use        Hatch_system__lock_hatch__index___axiom as Hatch_system__lock_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 39 0 0][@GP_Subp:hatch_system.ads:39] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 39 0 0] true }
  ensures { [#"hatch_system.ads" 39 0 0] ([#"hatch_system.ads" 41 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:hatch_system.ads:41:13] [@comment:    Post => Self.Get_Hatches(Index).Closed = True and then Self.Get_Hatches(Index).Locked = True;             ^ hatch_system.ads:41:13:VC_POSTCONDITION] [@GP_Shape:pragargs__andthen] [@model_vc_post] [@GP_Id:2] ( ( [@GP_Sloc:hatch_system.ads:41:13] [@GP_Pretty_Ada:3176] ( ((let temp___375 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_374 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_374 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_374 { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___375 Hatch_system__lock_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3186] [@GP_Sloc:hatch_system.ads:41:60] ( ((let temp___377 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_376 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_376 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_376 { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___377 Hatch_system__lock_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:39 *)
  ;
   assume {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag } True False True True) };
   assume {  (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__lock_hatch__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:39 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:39 *)
  ;
   assume {  ( [@GP_Pretty_Ada:3619] ( ((let temp___373 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_372 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_372 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_372 { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___373 Hatch_system__lock_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) };
   try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:60:5] ([#"hatch_system.adb" 60 0 0] (if (( ([#"hatch_system.adb" 60 0 0] [#"hatch_system.adb" 60 0 0] (([@branch_id=2595] Main.spark__branch).bool__content <- ( ((Boolean.to_int((let temp___362 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
    (Array__Int__Hatch_system__hatch.get(temp___362) (Hatch_system__lock_hatch__index.index))))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) )));
   ( [@branch_id=2595] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:hatch_system.adb:61:7] ([#"hatch_system.adb" 61 0 0] [#"hatch_system.adb" 61 0 0] raise Return__exc) ) )) else (
    ()))) );
   ( [@GP_Sloc:hatch_system.adb:64:26] ([#"hatch_system.adb" 64 0 0] (let temp___367 [@mlw:proxy_symbol] [@introduced] = (let temp___366 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 64 0 0] begin ensures {true} let _ = (let _ = temp___366.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     ()))
     in () end ;
    { ( temp___366 ) with Hatch_system__hatch_system.__split_fields = { ( temp___366.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___365 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__lock_hatch__index.index) ((let temp___364 [@mlw:proxy_symbol] [@introduced] = (let temp___363 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
      (Array__Int__Hatch_system__hatch.get temp___363 Hatch_system__lock_hatch__index.index)))
      in (
      ( [#"hatch_system.adb" 64 0 0] begin ensures {true} let _ = (let _ = temp___364.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
       ()))
       in () end ;
      { ( temp___364 ) with Hatch_system__hatch.__split_fields = { ( temp___364.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((1 : int))) } } )))
     ))))
     } } )))
    in (
    [#"hatch_system.adb" 64 0 0] (Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___367.Hatch_system__hatch_system.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ((Boolean.to_int((let temp___369 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___369) (Hatch_system__lock_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) && ((Boolean.to_int((let temp___370 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___370) (Hatch_system__lock_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) ) in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "lock_hatch" defined at hatch_system.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__lock_hatch__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__lock_hatch__self as Hatch_system__lock_hatch__self
 use        Hatch_system__lock_hatch__index as Hatch_system__lock_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__lock_hatch__self___axiom as Hatch_system__lock_hatch__self___axiom
 use        Hatch_system__lock_hatch__index___axiom as Hatch_system__lock_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 39 0 0][@GP_Subp:hatch_system.ads:39] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 39 0 0] true }
  ensures { [#"hatch_system.ads" 39 0 0] true }
   = [@vc:divergent]
  ( [#"hatch_system.ads" 39 0 0] assume { [#"hatch_system.ads" 39 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag } True False True True) };
  [#"hatch_system.ads" 39 0 0] assume { [#"hatch_system.ads" 39 0 0] (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__lock_hatch__index.index True False True True) };
  [#"hatch_system.ads" 39 0 0] begin ensures {true} let _ = (let _ = ((Boolean.to_int((let temp___384 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__lock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__lock_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___384) (Hatch_system__lock_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unlock_hatch" defined at hatch_system.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__unlock_hatch__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__unlock_hatch__self as Hatch_system__unlock_hatch__self
 use        Hatch_system__unlock_hatch__index as Hatch_system__unlock_hatch__index
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__unlock_hatch__self___axiom as Hatch_system__unlock_hatch__self___axiom
 use        Hatch_system__unlock_hatch__index___axiom as Hatch_system__unlock_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 43 0 0][@GP_Subp:hatch_system.ads:43] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 43 0 0] true }
  ensures { [#"hatch_system.ads" 43 0 0] ([#"hatch_system.ads" 45 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:    Post => Self.Get_Hatches(Index).Locked = False;             ^ hatch_system.ads:45:13:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:hatch_system.ads:45:13] [@model_vc_post] [@GP_Id:3] ( [@GP_Pretty_Ada:3688] [@GP_Sloc:hatch_system.ads:45:13] ( ((let temp___395 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_394 : Array__Int__Hatch_system__hatch.map.
   ( (temp___result_394 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_394 { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag }) )) in (
   (Array__Int__Hatch_system__hatch.get temp___395 Hatch_system__unlock_hatch__index.index)))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:43 *)
  ;
   assume {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag } True False True True) };
   assume {  (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__unlock_hatch__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:43 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:43 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:43 *)
  ;
   assume {  ( [@GP_Pretty_Ada:3672] ( ((epsilon temp___result_393 : bool.
   ( (temp___result_393 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_393 { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag }) )) = True) <-> false ) ) };
   try
   ( ();
   ( [@GP_Sloc:hatch_system.adb:69:8] ([#"hatch_system.adb" 69 0 0] ()) );
   ( [@GP_Sloc:hatch_system.adb:69:5] ([#"hatch_system.adb" 69 0 0] (if (( ([#"hatch_system.adb" 69 0 0] [#"hatch_system.adb" 69 0 0] (([@branch_id=2644] Main.spark__branch).bool__content <- ( (Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag })) )));
   ( [@branch_id=2644] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:hatch_system.adb:70:7] ([#"hatch_system.adb" 70 0 0] [#"hatch_system.adb" 70 0 0] raise Return__exc) ) )) else (
    ()))) );
   ( [@GP_Sloc:hatch_system.adb:73:26] ([#"hatch_system.adb" 73 0 0] (let temp___389 [@mlw:proxy_symbol] [@introduced] = (let temp___388 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 73 0 0] begin ensures {true} let _ = (let _ = temp___388.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     ()))
     in () end ;
    { ( temp___388 ) with Hatch_system__hatch_system.__split_fields = { ( temp___388.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___387 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
     (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__unlock_hatch__index.index) ((let temp___386 [@mlw:proxy_symbol] [@introduced] = (let temp___385 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
      (Array__Int__Hatch_system__hatch.get temp___385 Hatch_system__unlock_hatch__index.index)))
      in (
      ( [#"hatch_system.adb" 73 0 0] begin ensures {true} let _ = (let _ = temp___386.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
       ()))
       in () end ;
      { ( temp___386 ) with Hatch_system__hatch.__split_fields = { ( temp___386.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((0 : int))) } } )))
     ))))
     } } )))
    in (
    [#"hatch_system.adb" 73 0 0] (Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___389.Hatch_system__hatch_system.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int((let temp___391 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag })) in (
   (Array__Int__Hatch_system__hatch.get(temp___391) (Hatch_system__unlock_hatch__index.index))))
  .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "unlock_hatch" defined at hatch_system.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__unlock_hatch__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__unlock_hatch__self as Hatch_system__unlock_hatch__self
 use        Hatch_system__unlock_hatch__index as Hatch_system__unlock_hatch__index
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatch_index___axiom as Hatch_system__hatch_index___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__unlock_hatch__self___axiom as Hatch_system__unlock_hatch__self___axiom
 use        Hatch_system__unlock_hatch__index___axiom as Hatch_system__unlock_hatch__index___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 43 0 0][@GP_Subp:hatch_system.ads:43] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 43 0 0] true }
  ensures { [#"hatch_system.ads" 43 0 0] true }
   = [@vc:divergent]
  ( [#"hatch_system.ads" 43 0 0] assume { [#"hatch_system.ads" 43 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag } True False True True) };
  [#"hatch_system.ads" 43 0 0] assume { [#"hatch_system.ads" 43 0 0] (Hatch_system__hatch_index___axiom.dynamic_invariant Hatch_system__unlock_hatch__index.index True False True True) };
  [#"hatch_system.ads" 43 0 0] begin ensures {true} let _ = (let _ = ((Boolean.to_int((Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__unlock_hatch__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unlock_hatch__self.self__attr__tag })))) = (Boolean.to_int((Boolean.of_int((0 : int)))))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "seal" defined at hatch_system.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__seal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__seal__self as Hatch_system__seal__self
 use        Hatch_system__seal__L_2__i as Hatch_system__seal__L_2__i
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__status as Hatch_system__status
 use        Hatch_system__status__rep as Hatch_system__status__rep
 use        Hatch_system__seal__L_2 as Hatch_system__seal__L_2
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__seal__L_2__i___axiom as Hatch_system__seal__L_2__i___axiom
 use        Hatch_system__seal__L_2___axiom as Hatch_system__seal__L_2___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__seal__self___axiom as Hatch_system__seal__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 47 0 0][@GP_Subp:hatch_system.ads:47] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 47 0 0] true }
  ensures { [#"hatch_system.ads" 47 0 0] ([#"hatch_system.ads" 48 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:    Post => ((for all I in Self.Get_Hatches'Range =>              ^ hatch_system.ads:48:13:VC_POSTCONDITION] [@GP_Shape:pragargs__andthen] [@model_vc_post] [@GP_Id:4] [@GP_Sloc:hatch_system.ads:48:13] ( (forall i [#"hatch_system.ads" 48 0 0]  [@model_trace:3258] [@name:I]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( ( [@GP_Sloc:hatch_system.ads:49:16] [@GP_Pretty_Ada:3278] ( ((let temp___424 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_423 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_423 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_423 { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___424 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Sloc:hatch_system.ads:49:59] [@GP_Pretty_Ada:3288] ( ((let temp___426 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_425 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_425 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_425 { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___426 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) )) /\ ( [@GP_Pretty_Ada:3292] [@GP_Sloc:hatch_system.ads:50:22] ((epsilon temp___result_427 : bool.
   ( (temp___result_427 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_427 { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }) )) = True) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:47 *)
  ;
   assume {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:47 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:47 *)
  ;
   try
   ( ();
   ([#"hatch_system.adb" 78 0 0] ());
   ();
   ( [@GP_Sloc:hatch_system.adb:78:27] ([#"hatch_system.adb" 78 0 0] (let temp___399 [@mlw:proxy_symbol] [@introduced] = (0 : int) in (
   (let temp___400 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    ( () (* Translation of an Ada loop from hatch_system.adb:78 *)
    ;
    [#"hatch_system.adb" 78 0 0] try
     ( [#"hatch_system.adb" 78 0 0] begin ensures {true} let _ = (let _ = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
      ()))
      in () end ;
     (let temp___411 [@mlw:proxy_symbol] [@introduced] = [#"hatch_system.adb" 78 0 0] (val _f : Hatch_system__hatch_system.hatch_system
     ensures {[#"hatch_system.adb" 78 0 0] (result = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })} 
     in _f) in (
      ( () (* Unrolling of the loop statements of loop hatch_system.adb:78 *)
      ;
      [#"hatch_system.adb" 78 0 0] (Hatch_system__seal__L_2__i.i.int__content <- ( (0 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:79:24] ([#"hatch_system.adb" 79 0 0] (let temp___405 [@mlw:proxy_symbol] [@introduced] = (let temp___404 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 79 0 0] begin ensures {true} let _ = (let _ = temp___404.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___404 ) with Hatch_system__hatch_system.__split_fields = { ( temp___404.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___403 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__seal__L_2__i.i.int__content) ((let temp___402 [@mlw:proxy_symbol] [@introduced] = (let temp___401 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___401 Hatch_system__seal__L_2__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 79 0 0] begin ensures {true} let _ = (let _ = temp___402.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed in (
          ()))
          in () end ;
         { ( temp___402 ) with Hatch_system__hatch.__split_fields = { ( temp___402.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__closed = (Boolean.of_int((1 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 79 0 0] (Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___405.Hatch_system__hatch_system.__split_fields ))))
      ) );
      ( [@GP_Sloc:hatch_system.adb:80:24] ([#"hatch_system.adb" 80 0 0] (let temp___410 [@mlw:proxy_symbol] [@introduced] = (let temp___409 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 80 0 0] begin ensures {true} let _ = (let _ = temp___409.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___409 ) with Hatch_system__hatch_system.__split_fields = { ( temp___409.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___408 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__seal__L_2__i.i.int__content) ((let temp___407 [@mlw:proxy_symbol] [@introduced] = (let temp___406 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___406 Hatch_system__seal__L_2__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 80 0 0] begin ensures {true} let _ = (let _ = temp___407.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
          ()))
          in () end ;
         { ( temp___407 ) with Hatch_system__hatch.__split_fields = { ( temp___407.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((1 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 80 0 0] (Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___410.Hatch_system__hatch_system.__split_fields ))))
      ) );
       (Hatch_system__seal__L_2__i.i.int__content <- ( (1 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:79:24] ([#"hatch_system.adb" 79 0 0] (let temp___405 [@mlw:proxy_symbol] [@introduced] = (let temp___404 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 79 0 0] begin ensures {true} let _ = (let _ = temp___404.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___404 ) with Hatch_system__hatch_system.__split_fields = { ( temp___404.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___403 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__seal__L_2__i.i.int__content) ((let temp___402 [@mlw:proxy_symbol] [@introduced] = (let temp___401 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___401 Hatch_system__seal__L_2__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 79 0 0] begin ensures {true} let _ = (let _ = temp___402.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed in (
          ()))
          in () end ;
         { ( temp___402 ) with Hatch_system__hatch.__split_fields = { ( temp___402.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__closed = (Boolean.of_int((1 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 79 0 0] (Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___405.Hatch_system__hatch_system.__split_fields ))))
      ) );
      ( [@GP_Sloc:hatch_system.adb:80:24] ([#"hatch_system.adb" 80 0 0] (let temp___410 [@mlw:proxy_symbol] [@introduced] = (let temp___409 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 80 0 0] begin ensures {true} let _ = (let _ = temp___409.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___409 ) with Hatch_system__hatch_system.__split_fields = { ( temp___409.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___408 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__seal__L_2__i.i.int__content) ((let temp___407 [@mlw:proxy_symbol] [@introduced] = (let temp___406 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___406 Hatch_system__seal__L_2__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 80 0 0] begin ensures {true} let _ = (let _ = temp___407.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
          ()))
          in () end ;
         { ( temp___407 ) with Hatch_system__hatch.__split_fields = { ( temp___407.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((1 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 80 0 0] (Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___410.Hatch_system__hatch_system.__split_fields ))))
      ) ) )))
      )
    with
     Hatch_system__seal__L_2.L_2 -> ()
    end )))
   ))
   ) );
   ( [@GP_Sloc:hatch_system.adb:83:12] ([#"hatch_system.adb" 83 0 0] (let temp___414 [@mlw:proxy_symbol] [@introduced] = (let temp___413 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 83 0 0] begin ensures {true} let _ = (let _ = temp___413.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__s in (
     ()))
     in () end ;
    { ( temp___413 ) with Hatch_system__hatch_system.__split_fields = { ( temp___413.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__s = (Hatch_system__status__rep.of_rep((0 : int))) } } )))
    in (
    [#"hatch_system.adb" 83 0 0] (Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___414.Hatch_system__hatch_system.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ( (let i =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((0 : int) <= i)) ((i <= (1 : int))))) then (
     begin ensures {true} let _ = (let _ = ( ((Boolean.to_int((let temp___416 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) in (
     (Array__Int__Hatch_system__hatch.get(temp___416) (i))))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) && ((Boolean.to_int((let temp___417 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) in (
     (Array__Int__Hatch_system__hatch.get(temp___417) (i))))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) ) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@model_trace:3258] [@name:I]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( ( [@GP_Pretty_Ada:3278] ( ((let temp___419 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_418 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_418 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_418 { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___419 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__closed = True) <-> true ) ) /\ ( [@GP_Pretty_Ada:3288] ( ((let temp___421 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_420 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_420 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_420 { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___421 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> true ) ) ) )) )} 
  in _f) ) && (Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag })) ) in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "seal" defined at hatch_system.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__seal__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__seal__self as Hatch_system__seal__self
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__seal__self___axiom as Hatch_system__seal__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 47 0 0][@GP_Subp:hatch_system.ads:47] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 47 0 0] true }
  ensures { [#"hatch_system.ads" 47 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 47 0 0] assume { [#"hatch_system.ads" 47 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__seal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__seal__self.self__attr__tag } True False True True) }
end

(* Module for checking contracts and absence of run-time errors in subprogram "unseal" defined at hatch_system.ads:52, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Hatch_system__unseal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__get_hatches as Hatch_system__get_hatches
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__is_sealed as Hatch_system__is_sealed
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__unseal__self as Hatch_system__unseal__self
 use        Hatch_system__unseal__L_3__i as Hatch_system__unseal__L_3__i
 use        Hatch_system__hatch as Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__status as Hatch_system__status
 use        Hatch_system__status__rep as Hatch_system__status__rep
 use        Hatch_system__unseal__L_3 as Hatch_system__unseal__L_3
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Array__Int__Hatch_system__hatch as Array__Int__Hatch_system__hatch
 use        Hatch_system__unseal__L_3__i___axiom as Hatch_system__unseal__L_3__i___axiom
 use        Hatch_system__unseal__L_3___axiom as Hatch_system__unseal__L_3___axiom
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__get_hatches___axiom as Hatch_system__get_hatches___axiom
 use        Hatch_system__get_status___axiom as Hatch_system__get_status___axiom
 use        Hatch_system__is_sealed___axiom as Hatch_system__is_sealed___axiom
 use        Hatch_system__unseal__self___axiom as Hatch_system__unseal__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 52 0 0][@GP_Subp:hatch_system.ads:52] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 52 0 0] true }
  ensures { [#"hatch_system.ads" 52 0 0] ([#"hatch_system.ads" 53 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:    Post => ((for all I in Self.Get_Hatches'Range =>              ^ hatch_system.ads:53:13:VC_POSTCONDITION] [@GP_Shape:pragargs__andthen] [@model_vc_post] [@GP_Id:5] [@GP_Sloc:hatch_system.ads:53:13] ( (forall i [#"hatch_system.ads" 53 0 0]  [@name:I] [@model_trace:3316]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( [@GP_Sloc:hatch_system.ads:54:16] [@GP_Pretty_Ada:3336] ( ((let temp___450 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_449 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_449 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_449 { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___450 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) )) /\ ( [@GP_Pretty_Ada:3342] [@GP_Sloc:hatch_system.ads:55:22] ( ((epsilon temp___result_451 : bool.
   ( (temp___result_451 = (Hatch_system__is_sealed.is_sealed { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })) /\ (Hatch_system__is_sealed.is_sealed__function_guard temp___result_451 { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }) )) = True) <-> false ) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram hatch_system.ads:52 *)
  ;
   assume {  (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram hatch_system.ads:52 *)
  ;
  () (* Check for RTE in the Pre of the subprogram hatch_system.ads:52 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram hatch_system.ads:52 *)
  ;
   try
   ( ();
   ([#"hatch_system.adb" 88 0 0] ());
   ();
   ( [@GP_Sloc:hatch_system.adb:88:27] ([#"hatch_system.adb" 88 0 0] (let temp___433 [@mlw:proxy_symbol] [@introduced] = (0 : int) in (
   (let temp___434 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    ( () (* Translation of an Ada loop from hatch_system.adb:88 *)
    ;
    [#"hatch_system.adb" 88 0 0] try
     ( [#"hatch_system.adb" 88 0 0] begin ensures {true} let _ = (let _ = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } in (
      ()))
      in () end ;
     (let temp___440 [@mlw:proxy_symbol] [@introduced] = [#"hatch_system.adb" 88 0 0] (val _f : Hatch_system__hatch_system.hatch_system
     ensures {[#"hatch_system.adb" 88 0 0] (result = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })} 
     in _f) in (
      ( () (* Unrolling of the loop statements of loop hatch_system.adb:88 *)
      ;
      [#"hatch_system.adb" 88 0 0] (Hatch_system__unseal__L_3__i.i.int__content <- ( (0 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:89:24] ([#"hatch_system.adb" 89 0 0] (let temp___439 [@mlw:proxy_symbol] [@introduced] = (let temp___438 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 89 0 0] begin ensures {true} let _ = (let _ = temp___438.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___438 ) with Hatch_system__hatch_system.__split_fields = { ( temp___438.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___437 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__unseal__L_3__i.i.int__content) ((let temp___436 [@mlw:proxy_symbol] [@introduced] = (let temp___435 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___435 Hatch_system__unseal__L_3__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 89 0 0] begin ensures {true} let _ = (let _ = temp___436.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
          ()))
          in () end ;
         { ( temp___436 ) with Hatch_system__hatch.__split_fields = { ( temp___436.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((0 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 89 0 0] (Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___439.Hatch_system__hatch_system.__split_fields ))))
      ) );
       (Hatch_system__unseal__L_3__i.i.int__content <- ( (1 : int) ));
      ();
      ( [@GP_Sloc:hatch_system.adb:89:24] ([#"hatch_system.adb" 89 0 0] (let temp___439 [@mlw:proxy_symbol] [@introduced] = (let temp___438 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } in (
       ( [#"hatch_system.adb" 89 0 0] begin ensures {true} let _ = (let _ = temp___438.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        ()))
        in () end ;
       { ( temp___438 ) with Hatch_system__hatch_system.__split_fields = { ( temp___438.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__h = (let temp___437 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
        (Array__Int__Hatch_system__hatch.set({ Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h) (Hatch_system__unseal__L_3__i.i.int__content) ((let temp___436 [@mlw:proxy_symbol] [@introduced] = (let temp___435 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__h in (
         (Array__Int__Hatch_system__hatch.get temp___435 Hatch_system__unseal__L_3__i.i.int__content)))
         in (
         ( [#"hatch_system.adb" 89 0 0] begin ensures {true} let _ = (let _ = temp___436.Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked in (
          ()))
          in () end ;
         { ( temp___436 ) with Hatch_system__hatch.__split_fields = { ( temp___436.Hatch_system__hatch.__split_fields ) with Hatch_system__hatch.rec__hatch_system__hatch__locked = (Boolean.of_int((0 : int))) } } )))
        ))))
        } } )))
       in (
       [#"hatch_system.adb" 89 0 0] (Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___439.Hatch_system__hatch_system.__split_fields ))))
      ) ) )))
      )
    with
     Hatch_system__unseal__L_3.L_3 -> ()
    end )))
   ))
   ) );
   ( [@GP_Sloc:hatch_system.adb:92:12] ([#"hatch_system.adb" 92 0 0] (let temp___443 [@mlw:proxy_symbol] [@introduced] = (let temp___442 [@mlw:proxy_symbol] [@introduced] = { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } in (
    ( [#"hatch_system.adb" 92 0 0] begin ensures {true} let _ = (let _ = temp___442.Hatch_system__hatch_system.__split_fields.Hatch_system__hatch_system.rec__hatch_system__hatch_system__s in (
     ()))
     in () end ;
    { ( temp___442 ) with Hatch_system__hatch_system.__split_fields = { ( temp___442.Hatch_system__hatch_system.__split_fields ) with Hatch_system__hatch_system.rec__hatch_system__hatch_system__s = (Hatch_system__status__rep.of_rep((1 : int))) } } )))
    in (
    [#"hatch_system.adb" 92 0 0] (Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content <- ( temp___443.Hatch_system__hatch_system.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ( (let i =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((0 : int) <= i)) ((i <= (1 : int))))) then (
     begin ensures {true} let _ = (let _ = ((Boolean.to_int((let temp___445 [@mlw:proxy_symbol] [@introduced] = (Hatch_system__get_hatches___axiom.get_hatches({ Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })) in (
     (Array__Int__Hatch_system__hatch.get(temp___445) (i))))
    .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:3316]  : int.
   ( ( ((0 : int) <= i) /\ (i <= (1 : int)) ) -> ( [@GP_Pretty_Ada:3336] ( ((let temp___447 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_446 : Array__Int__Hatch_system__hatch.map.
    ( (temp___result_446 = (Hatch_system__get_hatches.get_hatches { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })) /\ (Hatch_system__get_hatches.get_hatches__function_guard temp___result_446 { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag }) )) in (
    (Array__Int__Hatch_system__hatch.get temp___447 i)))
   .Hatch_system__hatch.__split_fields.Hatch_system__hatch.rec__hatch_system__hatch__locked = True) <-> false ) ) )) )} 
  in _f) ) && ((Boolean.to_int((Hatch_system__is_sealed___axiom.is_sealed({ Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag })))) = (Boolean.to_int((Boolean.of_int((0 : int)))))) ) in (
   ()))
   in () end  )
end

(* Module for checking LSP for subprogram "unseal" defined at hatch_system.ads:52, created in Gnat2Why.Subprograms.Generate_VCs_For_LSP *)
module Hatch_system__unseal__subprogram_lsp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Hatch_system__hatch_system as Hatch_system__hatch_system
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom
 use        Hatch_system__unseal__self as Hatch_system__unseal__self
 use        Hatch_system__hatch___axiom as Hatch_system__hatch___axiom
 use        Hatch_system__hatches___axiom as Hatch_system__hatches___axiom
 use        Hatch_system__status___axiom as Hatch_system__status___axiom
 use        Hatch_system__unseal__self___axiom as Hatch_system__unseal__self___axiom
 use        Hatch_system__hatch_system___axiom as Hatch_system__hatch_system___axiom

 let def [#"hatch_system.ads" 52 0 0][@GP_Subp:hatch_system.ads:52] 
   (__void_param : unit)
  requires { [#"hatch_system.ads" 52 0 0] true }
  ensures { [#"hatch_system.ads" 52 0 0] true }
   = [@vc:divergent]
  [#"hatch_system.ads" 52 0 0] assume { [#"hatch_system.ads" 52 0 0] (Hatch_system__hatch_system___axiom.dynamic_invariant { Hatch_system__hatch_system.__split_fields = Hatch_system__unseal__self.self__split_fields.Hatch_system__hatch_system.__split_fields__content; Hatch_system__hatch_system.attr__tag = Hatch_system__unseal__self.self__attr__tag } True False True True) }
end
